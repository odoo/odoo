-
    Creating demo data that require looking for accounts
-
    !python {model: ir.model.data} : |
        import time
        expense_account_id = self.pool.get('account.account').search(cr, uid, [('user_type', '=', ref('account.data_account_type_expenses'))])
        if expense_account_id:
            vals = {
                'name': 'Requirements analysis and specification',
                'user_id': ref('base.user_root'),
                'date': time.strftime('%Y-%m-%d'),
                'unit_amount': 2.00,
                'product_id': ref('product.product_product_consultant'),
                'product_uom_id': ref('product.product_uom_hour'),
                'account_id': ref('analytic.analytic_administratif'),
                'amount': -60.00,
                'general_account_id': expense_account_id[0],
                'journal_id': ref('analytic_journal')
            }
            self._update(cr, uid, 'account.analytic.line', 'hr_timesheet', vals, 'working_hours_requirements')
            vals = {
                'name': 'Design and specification',
                'user_id': ref('base.user_root'),
                'date': time.strftime('%Y-%m-%d'),
                'unit_amount': 1.00,
                'product_id': ref('product.product_product_consultant'),
                'product_uom_id': ref('product.product_uom_hour'),
                'account_id': ref('analytic.analytic_administratif'),
                'amount': -30.00,
                'general_account_id': expense_account_id[0],
                'journal_id': ref('analytic_journal')
            }
            self._update(cr, uid, 'account.analytic.line', 'hr_timesheet', vals, 'working_hours_design')
            vals = {
                'name': 'Coding and module testing',
                'user_id': ref('base.user_root'),
                'date': time.strftime('%Y-%m-%d'),
                'unit_amount': 3.00,
                'product_id': ref('product.product_product_consultant'),
                'product_uom_id': ref('product.product_uom_hour'),
                'account_id': ref('analytic.analytic_administratif'),
                'amount': -90.00,
                'general_account_id': expense_account_id[0],
                'journal_id': ref('analytic_journal')
            }
            self._update(cr, uid, 'account.analytic.line', 'hr_timesheet', vals, 'working_hours_coding')
            vals = {
                'name': 'Integration and system testing',
                'user_id': ref('base.user_root'),
                'date': time.strftime('%Y-%m-%d'),
                'unit_amount': 1.00,
                'product_id': ref('product.product_product_consultant'),
                'product_uom_id': ref('product.product_uom_hour'),
                'account_id': ref('analytic.analytic_administratif'),
                'amount': -30.00,
                'general_account_id': expense_account_id[0],
                'journal_id': ref('analytic_journal')
            }
            self._update(cr, uid, 'account.analytic.line', 'hr_timesheet', vals, 'working_hours_testing')
            vals = {
                'name': 'Delivery and maintenance',
                'user_id': ref('base.user_root'),
                'date': time.strftime('%Y-%m-%d'),
                'unit_amount': 1.00,
                'product_id': ref('product.product_product_consultant'),
                'product_uom_id': ref('product.product_uom_hour'),
                'account_id': ref('analytic.analytic_administratif'),
                'amount': -30.00,
                'general_account_id': expense_account_id[0],
                'journal_id': ref('analytic_journal')
            }
            self._update(cr, uid, 'account.analytic.line', 'hr_timesheet', vals, 'working_hours_maintenance')
