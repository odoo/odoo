-
  !record {model: res.partner, id: partner_company_a, view: False}:
    name: Company A
    supplier: 1
-
  !record {model: res.company, id: company_a, view: False}:
    name: Company A
    parent_id: base.main_company
    currency_id: base.EUR
    partner_id: partner_company_a
    so_from_po: 1
    po_from_so: 1
-
  !record {model: stock.location, id: location_stock_company_a, view: False}:
    name: Stock - A
    usage: internal
    company_id: company_a
-
  !record {model: stock.location, id: location_output_company_a, view: False}:
    name: Output - A
    usage: internal
    company_id: company_a
-
  !record {model: stock.warehouse, id: warehouse_company_a, view: False}:
    name: purchase warehouse - A
    code: CMPA
    wh_input_stock_loc_id: location_stock_company_a
    lot_stock_id: location_stock_company_a
    wh_output_stock_loc_id: location_output_company_a
    company_id: company_a
-
  !record {model: res.partner, id: partner_company_b, view: False}:
    name: Company B
    supplier: 1
-
  !record {model: res.company, id: company_b, view: False}:
    name: Company B
    parent_id: base.main_company
    currency_id: base.EUR
    partner_id: partner_company_b
    so_from_po: 1
    po_from_so: 1
-
  !record {model: stock.location, id: location_stock_company_b, view: False}:
    name: Stock - B
    usage: internal
    company_id: company_b
-
  !record {model: stock.location, id: location_output_company_b, view: False}:
    name: Output - B
    usage: internal
    company_id: company_b
-
  !record {model: stock.warehouse, id: warehouse_company_b, view: False}:
    name: purchase warehouse - B
    code: CMPB
    wh_input_stock_loc_id: location_stock_company_b
    lot_stock_id: location_stock_company_b
    wh_output_stock_loc_id: location_output_company_b
    company_id: company_b
-
  Apply warehouse in company.
-
  !record {model: res.company, id: company_a}:
    warehouse_id: warehouse_company_a
-
  !record {model: res.company, id: company_b}:
    warehouse_id: warehouse_company_b
-
  !record {model: product.product, id: product_consultant, view: False}:
    name: Service
    uom_id: product.product_uom_hour
    uom_po_id: product.product_uom_hour
    categ_id: product.product_category_all
    type: service
    company_id: False
-
  Create a user for each company
-
  !record {model: res.users, id: res_users_company_a, view: False}:
    name: User A
    login: usera
    password: usera
    email: usera@yourcompany.com
    company_id: company_a
    company_ids:
      - company_a
    groups_id:
      - base.group_sale_salesman
      - purchase.group_purchase_user
-
  !record {model: res.users, id: res_users_company_b, view: False}:
    name: User B
    login: userb
    password: userb
    email: userb@yourcompany.com
    company_id: company_b
    company_ids:
      - company_b
    groups_id:
      - base.group_sale_salesman
      - purchase.group_purchase_user
-
  Install COA for new companies.
-
  !python {model: account.installer}: |
    wiz_comp_a = self.create(cr, uid, {'charts': 'configurable', 'company_id': ref("company_a")})
    self.execute(cr, uid, [wiz_comp_a])
    wiz_comp_b = self.create(cr, uid, {'charts': 'configurable', 'company_id': ref("company_b")})
    self.execute(cr, uid, [wiz_comp_b])
-
  !python {model: wizard.multi.charts.accounts}: |
    wiz_comp_a = self.create(cr, uid, {
        'chart_template_id': '1',
        'company_id': ref("company_a"),
        'currency_id': ref("base.EUR"),
        'code_digits': 6,
        'purchase_tax': False,
        'sale_tax': False})
    self.execute(cr, uid, [wiz_comp_a])
    wiz_comp_b = self.create(cr, uid, {
        'chart_template_id': '1',
        'company_id': ref("company_b"),
        'currency_id': ref("base.EUR"),
        'code_digits': 6,
        'purchase_tax': False,
        'sale_tax': False})
    self.execute(cr, uid, [wiz_comp_b])
-
  Now remove company from related partners of company and apply default accounts.
-
  !python {model: res.partner}: |
    account_obj = self.pool.get("account.account")
    account_receivable_a = account_obj.search(cr, uid, [('company_id', '=', ref("company_a")), ('type', '=', 'receivable')], context=context)
    account_payable_a = account_obj.search(cr, uid, [('company_id', '=', ref("company_a")), ('type', '=', 'payable')], context=context)
    self.write(cr, uid, [ref("partner_company_a")], {
        'company_id': False, 
        'property_account_receivable': account_receivable_a[0],
        'property_account_payable': account_payable_a[0]
    }, context=context)
    account_receivable_b = account_obj.search(cr, uid, [('company_id', '=', ref("company_b")), ('type', '=', 'receivable')], context=context)
    account_payable_b = account_obj.search(cr, uid, [('company_id', '=', ref("company_b")), ('type', '=', 'payable')], context=context)
    self.write(cr, uid, [ref("partner_company_b")], {
        'company_id': False, 
        'property_account_receivable': account_receivable_b[0],
        'property_account_payable': account_payable_b[0]
    }, context=context)
