<templates xml:space="preserve">
    <t t-name="html_editor.GradientPicker">
        <div class="d-flex flex-column">

            <div class="align-items-center d-flex justify-content-between my-3 o_type_row">
                Type
                <span class="d-flex justify-content-between">
                    <button t-attf-class="btn btn-sm btn-light {{ this.state.type === 'linear' ? 'active' : ''}}" t-on-click="() => this.selectType('linear')"> Linear </button>
                    <button t-attf-class="btn btn-sm btn-light {{ this.state.type === 'radial' ? 'active' : ''}}" t-on-click="() => this.selectType('radial')"> Radial </button>
                    <button t-attf-class="btn btn-sm btn-light {{ this.state.type === 'conic' ? 'active' : ''}}" t-on-click="() => this.selectType('conic')"> Conic </button>
                </span>
            </div>

            <div t-if="this.state.type === 'radial'">
                <div class="d-flex flex-column gap-1 mb-1 me-n1">
                    <div class="d-flex align-items-center justify-content-between">
                        <div style="margin-right: auto;">
                            Size
                        </div>
                        <button t-on-click="() => this.onSizeChange('closest-side')" t-attf-class="btn btn-light p-0 {{ this.state.size === 'closest-side' ? `active` : ''}}" title="Extend to the closest side">
                            <svg xmlns="http://www.w3.org/2000/svg" width="35" height="35" viewBox="0 0 20 20" fill="none">
                                <clipPath id="clip-rect">
                                    <rect x="2" y="2" width="16" height="16"/>
                                </clipPath>
                                <g clip-path="url(#clip-rect)">
                                    <circle cx="4" cy="6" r="2" fill="#333"/>
                                    <circle cx="4" cy="6" r="1.5" fill="#666"/>
                                    <circle cx="4" cy="6" r="1" fill="#999"/>
                                    <circle cx="4" cy="6" r="0.5" fill="#CCC"/>
                                </g>
                                <rect x="2" y="2" width="16" height="16" stroke="#999"></rect>
                            </svg>
                        </button>
                        <button t-on-click="() => this.onSizeChange('closest-corner')" t-attf-class="btn btn-light p-0 {{ this.state.size === 'closest-corner' ? `active` : ''}}" title="Extend to the closest corner">
                            <svg xmlns="http://www.w3.org/2000/svg" width="35" height="35" viewBox="0 0 20 20" fill="none">
                                <clipPath id="clip-rect">
                                    <rect x="2" y="2" width="16" height="16"/>
                                </clipPath>
                                <g clip-path="url(#clip-rect)">
                                    <circle cx="4" cy="6" r="4.4" fill="#333"/>
                                    <circle cx="4" cy="6" r="3.3" fill="#666"/>
                                    <circle cx="4" cy="6" r="2.2" fill="#999"/>
                                    <circle cx="4" cy="6" r="1.1" fill="#CCC"/>
                                </g>
                                <rect x="2" y="2" width="16" height="16" stroke="#999"></rect>
                            </svg>
                        </button>
                        <button t-on-click="() => this.onSizeChange('farthest-side')" t-attf-class="btn btn-light p-0 {{ this.state.size === 'farthest-side' ? `active` : ''}}" title="Extend to the farthest side">
                            <svg xmlns="http://www.w3.org/2000/svg" width="35" height="35" viewBox="0 0 20 20" fill="none">
                                <clipPath id="clip-rect">
                                    <rect x="2" y="2" width="16" height="16"/>
                                </clipPath>
                                <g clip-path="url(#clip-rect)">
                                    <circle cx="4" cy="6" r="14" fill="#333"/>
                                    <circle cx="4" cy="6" r="10.5" fill="#666"/>
                                    <circle cx="4" cy="6" r="7" fill="#999"/>
                                    <circle cx="4" cy="6" r="3.5" fill="#CCC"/>
                                </g>
                                <rect x="2" y="2" width="16" height="16" stroke="#999"></rect>
                            </svg>
                        </button>
                        <button t-on-click="() => this.onSizeChange('farthest-corner')" t-attf-class="btn btn-light p-0 {{ this.state.size === 'farthest-corner' ? `active`: ''}}" title="Extend to the farthest corner">
                            <svg xmlns="http://www.w3.org/2000/svg" width="35" height="35" viewBox="0 0 20 20" fill="none">
                                <clipPath id="clip-rect">
                                    <rect x="2" y="2" width="16" height="16"/>
                                </clipPath>
                                <g clip-path="url(#clip-rect)">
                                    <circle cx="4" cy="6" r="18" fill="#333"/>
                                    <circle cx="4" cy="6" r="13.5" fill="#666"/>
                                    <circle cx="4" cy="6" r="9" fill="#999"/>
                                    <circle cx="4" cy="6" r="4.5" fill="#CCC"/>
                                </g>
                                <rect x="2" y="2" width="16" height="16" stroke="#999"></rect>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
            <div t-if="this.state.type === 'linear' or this.state.type === 'conic'">
                <div class="d-flex align-items-center justify-content-between mb-1">
                    Angle
                    <span class="d-flex justify-content-between align-items-center">
                        <div class="d-flex justify-content-center align-items-center my-auto me-2 position-relative gradient-angle-knob"
                            t-ref="gradientAngleKnob"
                            t-attf-style="--angle: #{this.state.angle}deg;"
                            t-on-mousedown="onKnobMouseDown">
                            <div class="position-absolute gradient-angle-thumb"></div>
                        </div>
                        <div class="o_color_gradient_input d-flex align-items-center">
                            <input
                                name="angle"
                                type="number"
                                min="-360"
                                max="360"
                                t-att-value="this.state.angle"
                                t-on-change="onAngleChange"
                            />
                            <span>deg</span>
                        </div>
                    </span>
                </div>
            </div>
            <div t-if="this.state.type === 'radial' or this.state.type === 'conic'">
                <div class="d-flex flex-column gap-1 mb-1">
                    <div class="d-flex align-items-center justify-content-between">
                        Position X
                        <div class="d-flex">
                            <span class="o_color_gradient_input">
                                <input
                                    name="positionX"
                                    type="number"
                                    min="-100"
                                    max="200"
                                    t-att-value="this.positions['x']"
                                    t-on-change="(ev) => this.onPositionChange('x', ev)"
                                />
                                <span>%</span>
                            </span>
                        </div>
                    </div>
                    <div class="d-flex align-items-center justify-content-between">
                        Position Y
                        <div class="d-flex">
                            <span class="o_color_gradient_input">
                                <input
                                    name="positionY"
                                    type="number"
                                    min="-100"
                                    max="200"
                                    t-att-value="this.positions['y']"
                                    t-on-change="(ev) => this.onPositionChange('y', ev)"
                                />
                                <span>%</span>
                            </span>
                            
                        </div>
                    </div>
                </div>
            </div>



            <div class="custom-gradient-configurator mt-3">
                <div class="mb-1 d-flex justify-content-between">
                    Colors
                    <div class="align-items-center d-flex">
                        Repeating
                        <input 
                            class="ms-1"
                            name="repeating"
                            type="checkbox"
                            t-att-checked="this.state.repeating"
                            t-on-change="toggleRepeating"
                            t-ref="inputRepeating"
                        />
                    </div>
                </div>
                <div class="gradient-checkers"></div>
                <div class="gradient-preview" 
                     t-attf-style="background-image: #{this.cssGradients.preview};"
                     t-on-click="this.onGradientPreviewClick" >
                </div>
                <style><t t-out="this.cssGradients.sliderThumbStyle" /></style>
                <div class="gradient-colors">
                    <div t-foreach="this.colors" t-as="color" t-key="color_index">
                        <input type="range" min="0" max="100" t-att-value="color.percentage"
                               t-att-class="{'active': this.state.currentColorIndex === color_index}"
                               t-attf-name="custom gradient percentage color #{color_index+1}"
                               t-on-click="() => this.state.currentColorIndex = color_index"
                               t-on-change="(ev) => this.onColorPercentageChange(color_index, ev)" />
                    </div>
                    <div class="position-relative text-white fw-bolder color-percentage pe-none" t-out="this.colors[this.state.currentColorIndex].percentage" t-attf-style="left: calc(#{this.colors[this.state.currentColorIndex].percentage}% - #{0.15 * this.colors[this.state.currentColorIndex].percentage}px);"/>
                </div>
                <div class="gradient-color-bin">
                    <t t-if="this.colors.length > 2">
                        <a t-on-click="() => this.removeColor(this.state.currentColorIndex)"
                           t-attf-style="left: #{this.colors[this.state.currentColorIndex].percentage}%"
                           type="button" class="btn btn-sm btn-light"><i class="fa fa-fw fa-trash" role="img"/></a>
                    </t>
                </div>
            </div>

            <ColorPicker
                onColorSelect.bind="onColorChange"
                onColorPreview.bind="onColorPreview"
                setOnCloseCallback.bind="props.setOnCloseCallback"
                setOperationCallbacks.bind="props.setOperationCallbacks"
                defaultColor="this.currentColorHex"
                selectedColor="this.currentColorHex"
                noTransparency="props.noTransparency"
            />
        </div>
    </t>
</templates>
