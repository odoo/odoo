[[
   "start",
  ["keyword.control.module.elixir","defmodule"],
  ["meta.module.elixir"," "],
  ["entity.name.type.module.elixir","HelloModule"],
  ["text"," "],
  ["keyword.control.elixir","do"]
],[
   "comment.documentation.heredoc",
  ["text","  "],
  ["comment.documentation.heredoc","@moduledoc \"\"\""]
],[
   "comment.documentation.heredoc",
  ["comment.documentation.heredoc","    This is supposed to be `markdown`."]
],[
   "comment.documentation.heredoc",
  ["comment.documentation.heredoc","    __Yes__ this is [mark](http://down.format)"]
],[
   "comment.documentation.heredoc"
],[
   "comment.documentation.heredoc",
  ["comment.documentation.heredoc","    # Truly"]
],[
   "comment.documentation.heredoc"
],[
   "comment.documentation.heredoc",
  ["comment.documentation.heredoc","    ## marked"]
],[
   "comment.documentation.heredoc"
],[
   "comment.documentation.heredoc",
  ["comment.documentation.heredoc","    * with lists"]
],[
   "comment.documentation.heredoc",
  ["comment.documentation.heredoc","    * more"]
],[
   "comment.documentation.heredoc",
  ["comment.documentation.heredoc","    * and more"]
],[
   "comment.documentation.heredoc"
],[
   "comment.documentation.heredoc",
  ["comment.documentation.heredoc","        Even.with(code)"]
],[
   "comment.documentation.heredoc",
  ["comment.documentation.heredoc","        blocks |> with |> samples"]
],[
   "comment.documentation.heredoc"
],[
   "comment.documentation.heredoc",
  ["comment.documentation.heredoc","    _Docs are first class citizens in Elixir_ (Jose Valim)"]
],[
   "start",
  ["comment.documentation.heredoc","  \"\"\""]
],[
   "start",
  ["text","  "]
],[
   "start",
  ["text","  "],
  ["punctuation.definition.comment.elixir","#"],
  ["comment.line.number-sign.elixir"," A \"Hello world\" function"]
],[
   "start",
  ["text","  "],
  ["keyword.control.elixir","def"],
  ["text"," some_fun "],
  ["keyword.control.elixir","do"]
],[
   "start",
  ["text","    "],
  ["variable.other.constant.elixir","IO"],
  ["punctuation.separator.method.elixir","."],
  ["text","puts "],
  ["punctuation.definition.string.begin.elixir","\""],
  ["string.quoted.double.elixir","Juhu Kinners!"],
  ["punctuation.definition.string.end.elixir","\""]
],[
   "start",
  ["text","  "],
  ["keyword.control.elixir","end"]
],[
   "start",
  ["text","  "],
  ["punctuation.definition.comment.elixir","#"],
  ["comment.line.number-sign.elixir"," A private function"]
],[
   "start",
  ["text","  "],
  ["keyword.control.elixir","defp"],
  ["text"," priv "],
  ["keyword.control.elixir","do"]
],[
   "punctuation.definition.string.begin.elixir7",
  ["text","    is_regex "],
  ["punctuation.definition.string.begin.elixir","~r\"\"\""]
],[
   "punctuation.definition.string.begin.elixir7",
  ["string.quoted.double.heredoc.elixir","       This is a regex"]
],[
   "punctuation.definition.string.begin.elixir7",
  ["string.quoted.double.heredoc.elixir","       spanning several"]
],[
   "punctuation.definition.string.begin.elixir7",
  ["string.quoted.double.heredoc.elixir","       lines."]
],[
   "start",
  ["punctuation.definition.string.end.elixir","    \"\"\""]
],[
   "start",
  ["text","    x "],
  ["keyword.operator.assignment.elixir","="],
  ["text"," elem"],
  ["punctuation.section.function.elixir","("],
  ["punctuation.section.scope.elixir","{"],
  ["text"," "],
  ["punctuation.definition.constant.elixir",":"],
  ["constant.other.symbol.elixir","a"],
  ["punctuation.separator.object.elixir",","],
  ["text"," "],
  ["punctuation.definition.constant.elixir",":"],
  ["constant.other.symbol.elixir","b"],
  ["punctuation.separator.object.elixir",","],
  ["text"," "],
  ["punctuation.definition.constant.elixir",":"],
  ["constant.other.symbol.elixir","c"],
  ["text"," "],
  ["punctuation.section.scope.elixir","}"],
  ["punctuation.separator.object.elixir",","],
  ["text"," "],
  ["constant.numeric.elixir","0"],
  ["punctuation.section.function.elixir",")"],
  ["text","  "],
  ["punctuation.definition.comment.elixir","#"],
  ["comment.line.number-sign.elixir","=> :a"]
],[
   "start",
  ["text","  "],
  ["keyword.control.elixir","end"]
],[
   "start",
  ["keyword.control.elixir","end"]
],[
   "start"
],[
   "start",
  ["text","test_fun "],
  ["keyword.operator.assignment.elixir","="],
  ["text"," "],
  ["keyword.control.elixir","fn"],
  ["punctuation.section.function.elixir","("],
  ["text","x"],
  ["punctuation.section.function.elixir",")"],
  ["text"," "],
  ["keyword.operator.arithmetic.elixir","-"],
  ["keyword.operator.comparison.elixir",">"]
],[
   "start",
  ["text","  "],
  ["keyword.control.elixir","cond"],
  ["text"," "],
  ["keyword.control.elixir","do"]
],[
   "start",
  ["text","    x "],
  ["keyword.operator.comparison.elixir",">"],
  ["text"," "],
  ["constant.numeric.elixir","10"],
  ["text"," "],
  ["keyword.operator.arithmetic.elixir","-"],
  ["keyword.operator.comparison.elixir",">"]
],[
   "start",
  ["text","      "],
  ["punctuation.definition.constant.elixir",":"],
  ["constant.other.symbol.elixir","greater_than_ten"]
],[
   "start",
  ["text","    "],
  ["constant.language.elixir","true"],
  ["text"," "],
  ["keyword.operator.arithmetic.elixir","-"],
  ["keyword.operator.comparison.elixir",">"]
],[
   "start",
  ["text","      "],
  ["punctuation.definition.constant.elixir",":"],
  ["constant.other.symbol.elixir","maybe_ten"]
],[
   "start",
  ["text","  "],
  ["keyword.control.elixir","end"]
],[
   "start",
  ["keyword.control.elixir","end"]
]]