<?xml version="1.0" encoding="UTF-8" ?>
<templates xml:space="preserve">

    <t t-name="web._DomainSelector" owl="1">
        <div class="o_domain_node o_domain_tree o_domain_selector" aria-atomic="true" t-att-class="className" t-ref="root">
            <t t-if="tree.isSupported">
                <t t-set="node" t-value="tree.root" />
                <t t-if="node.children.length === 0">
                    <span>Match <strong>all records</strong></span>
                    <t t-if="!props.readonly">
                        <button class="btn btn-sm btn-primary o_domain_add_first_node_button ms-1" t-on-click="() => this.insertRootLeaf(node)">
                            <i class="fa fa-plus"/> Add condition
                        </button>
                    </t>
                </t>
                <t t-elif="node.children.length === 1">
                    Match records with the following rule:
                    <t t-call="web._DomainSelector.branch.children" />
                </t>
                <t t-else="">
                    <span>Match records with </span>
                    <t t-call="web._DomainSelector.branch.connector" />
                    <span> of the following rules:</span>
                    <t t-call="web._DomainSelector.branch.children" />
                </t>
            </t>
            <t t-else="">
                This domain is not supported.
                <t t-if="!props.readonly">
                    <button class="btn btn-sm btn-primary o_reset_domain_button ms-1" t-on-click="() => this.resetDomain()">Reset domain</button>
                </t>
            </t>
            <t t-if="props.isDebugMode and (!tree.isSupported or !props.readonly)">
                <label class="o_domain_debug_container">
                    <span class="small"># Code editor</span>
                    <textarea type="text" class="o_domain_debug_input" t-att-readonly="props.readonly" spellcheck="false" t-att-value="props.domain" t-on-change="(ev) => this.onDebugValueChange(ev.target.value)" />
                </label>
            </t>
        </div>
    </t>

    <t t-name="web._DomainSelector.controls" owl="1">
        <div class="o_domain_node_control_panel" role="toolbar" aria-label="Domain node">
            <button
                class="btn o_domain_add_node_button"
                title="Add node"
                aria-label="Add node"
                t-on-click="() => this.insertLeaf(parent, node)"
                t-on-mouseenter="(ev) => this.highlightNode(ev.target, true, 'o_hover_add_node')"
                t-on-mouseleave="(ev) => this.highlightNode(ev.target, false, 'o_hover_add_node')"
            >
                <i class="fa fa-plus"/>
            </button>
            <button
                class="btn o_domain_add_node_button"
                title="Add branch"
                aria-label="Add branch"
                t-on-click="() => this.insertBranch(parent, node)"
                t-on-mouseenter="(ev) => this.highlightNode(ev.target, true, 'o_hover_add_node o_hover_add_inset_node')"
                t-on-mouseleave="(ev) => this.highlightNode(ev.target, false, 'o_hover_add_node o_hover_add_inset_node')"
            >
                <i class="fa fa-sitemap"/>
            </button>
            <button
                class="btn btn-link text-danger o_domain_delete_node_button"
                title="Delete node"
                aria-label="Delete node"
                t-on-click="() => this.delete(parent, node)"
                t-on-mouseenter="(ev) => this.highlightNode(ev.target, true, 'o_hover_btns')"
                t-on-mouseleave="(ev) => this.highlightNode(ev.target, false, 'o_hover_btns')"
            >
                <i class="fa fa-trash"/>
            </button>
        </div>
    </t>

    <t t-name="web._DomainSelector.branch" owl="1">
        <div class="o_domain_node o_domain_tree">
            <div class="o_domain_tree_header o_domain_selector_row">
                <t t-if="!props.readonly">
                    <t t-call="web._DomainSelector.controls" />
                </t>
                <t t-call="web._DomainSelector.branch.connector" />
                <span class="ml4">of:</span>
            </div>
            <t t-call="web._DomainSelector.branch.children" />
        </div>
    </t>

    <t t-name="web._DomainSelector.branch.connector" owl="1">
        <t t-if="props.readonly">
            <strong>
                <t t-esc="node.title"/>
            </strong>
        </t>
        <t t-else="">
            <div class="d-inline-flex o_domain_tree_connector_selector" aria-atomic="true">
                <Dropdown togglerClass="'btn btn-link btn-sm btn-primary py-0 px-1 o_domain_tree_connector_caret'">
                    <t t-set-slot="toggler">
                        <t t-esc="node.title"/>
                    </t>
                    <DropdownItem onSelected="() => this.updateBranchConnector(node, 'AND')">all</DropdownItem>
                    <DropdownItem onSelected="() => this.updateBranchConnector(node, 'OR')">any</DropdownItem>
                </Dropdown>
            </div>
        </t>
    </t>

    <t t-name="web._DomainSelector.branch.children" owl="1">
        <div class="o_domain_node_children_container">
            <t t-foreach="node.children" t-as="child" t-key="child.id">
                <t t-call="web._DomainSelector.{{ child.type }}">
                    <t t-set="parent" t-value="node" />
                    <t t-set="node" t-value="child" />
                </t>
            </t>
        </div>
    </t>

    <t t-name="web._DomainSelector.leaf" owl="1">
        <div class="o_domain_node o_domain_leaf o_domain_selector_row">
            <t t-if="props.readonly">
                <div class="o_domain_leaf_info">
                    <t t-call="web._DomainSelector.leaf:readonly" />
                </div>
            </t>
            <t t-else="">
                <t t-call="web._DomainSelector.controls" />
                <div class="o_domain_leaf_edition">
                    <t t-call="web._DomainSelector.leaf:editable" />
                </div>
            </t>
        </div>
    </t>

    <t t-name="web._DomainSelector.leaf:readonly" owl="1">
        <ModelFieldSelector path="node.pathInfo.path" resModel="props.resModel" readonly="true" />
        <t t-if="typeof node.value === 'boolean'">is<t t-if="node.value ? ['is_not', 'not_equal'].includes(node.operatorInfo.key) : ['is', 'equal'].includes(node.operatorInfo.key)"> not</t> set</t>
        <t t-else="">
            <span class="o_domain_leaf_operator"> <t t-esc="node.operatorInfo.label" /></span>
            <t t-set="values" t-value="Array.isArray(node.value) ? node.value : [node.value]" />
            <t t-set="operator" t-value="node.operatorInfo.key" />
            <t t-set="connector" t-value="node.operatorInfo.key === 'between' ? 'and' : 'or'" />
            <t t-foreach="values" t-as="value" t-key="value_index">
                <span class="o_domain_leaf_value text-primary">
                    <t t-if="typeof value === 'string'"> "<t t-esc="value"/>"</t>
                    <t t-elif="isExprValue(value)"> <t t-esc="node.value.expr"/></t>
                    <t t-else=""> <t t-esc="value"/></t>
                </span>
                <t t-if="!value_last"> <t t-esc="connector" /> </t>
            </t>
        </t>
    </t>

    <t t-name="web._DomainSelector.leaf:editable" owl="1">
        <ModelFieldSelector path="node.pathInfo.path" resModel="props.resModel" readonly="false" update="(path, fieldInfo) => this.updatePath(node, path, fieldInfo)" isDebugMode="props.isDebugMode" />
        <div>
            <select class="o_domain_leaf_operator_select o_input text-truncate pe-3" t-on-change="(ev) => this.updateLeafOperator(node, ev.target.value)">
                <t t-foreach="getOperatorsInfo(node)" t-as="operator" t-key="operator.key">
                    <option t-att-value="operator.key" t-att-selected="node.operatorInfo.key === operator.key" t-esc="operator_value.label" />
                </t>
            </select>
        </div>

        <t t-if="node.operatorInfo.valueCount">
            <div class="o_ds_value_cell">
                <Editor info="getEditorInfo(node)" value="node.value" update="(value) => this.updateLeafValue(node, value)" fieldDef="node.pathInfo.fieldDef" onExprRemove="() => this.removeExprValue(node)" />
            </div>
        </t>
    </t>

</templates>
