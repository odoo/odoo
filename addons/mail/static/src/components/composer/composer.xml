<?xml version="1.0" encoding="UTF-8"?>
<templates xml:space="preserve">

    <t t-name="mail.Composer" owl="1">
        <div class="o_Composer"
            t-att-class="{
                'o-focused': composer and composer.__mfield_hasFocus(mself),
                'o-has-current-partner-avatar': props.hasCurrentPartnerAvatar,
                'o-has-footer': hasFooter,
                'o-has-header': hasHeader,
                'o-is-compact': props.isCompact,
            }"
            t-on-keydown="_onKeydown"
        >
            <t t-if="composer">
                <t t-if="isDropZoneVisible.value">
                    <DropZone
                        class="o_Composer_dropZone"
                        t-on-o-dropzone-files-dropped="_onDropZoneFilesDropped"
                        t-ref="dropzone"
                    />
                </t>
                <FileUploader
                    attachmentLocalIds="composer.__mfield_attachments(mself).map(attachment => attachment.localId)"
                    newAttachmentExtraData="newAttachmentExtraData"
                    t-ref="fileUploader"
                />
                <t t-if="hasHeader">
                    <div class="o_Composer_coreHeader">
                        <t t-if="props.hasThreadName and composer.__mfield_thread(mself)">
                            <span class="o_Composer_threadName">
                                on: <b><t t-esc="composer.__mfield_thread(mself).__mfield_displayName(mself)"/></b>
                            </span>
                        </t>
                        <t t-if="props.hasFollowers and !composer.__mfield_isLog(mself)">
                            <!-- Text for followers -->
                            <small class="o_Composer_followers">
                                <b class="text-muted">To: </b>
                                <em class="text-muted">Followers of </em>
                                <b>
                                    <t t-if="composer.__mfield_thread(mself)">
                                        &#32;&quot;<t t-esc="composer.__mfield_thread(mself).__mfield_name(mself)"/>&quot;
                                    </t>
                                    <t t-else="">
                                        this document
                                    </t>
                                </b>
                            </small>
                            <ComposerSuggestedRecipientList
                                threadLocalId="composer.__mfield_thread(mself).localId"
                            />
                        </t>
                    </div>
                </t>
                <t t-if="composer.__mfield_thread(mself) and composer.__mfield_thread(mself).__mfield_model(mself) === 'mail.channel' and composer.__mfield_thread(mself).__mfield_mass_mailing(mself)">
                    <div class="o_Composer_subject">
                        <input class="o_Composer_subjectInput" type="text" placeholder="Subject" t-on-input="_onInputSubject" t-ref="subject"/>
                    </div>
                </t>
                <t t-if="props.hasCurrentPartnerAvatar">
                    <div class="o_Composer_sidebarMain">
                        <img class="o_Composer_currentPartnerAvatar rounded-circle" t-att-src="currentPartnerAvatar" alt=""/>
                    </div>
                </t>
                <div
                    class="o_Composer_coreMain"
                    t-att-class="{
                        'o-composer-is-compact': props.isCompact,
                        'o-composer-is-extended': composer.__mfield_thread(mself) and composer.__mfield_thread(mself).__mfield_mass_mailing(mself),
                    }"
                >
                    <TextInput
                        class="o_Composer_textInput"
                        t-att-class="{
                            'o-composer-is-compact': props.isCompact,
                            'o_Composer_textInput-mobile': env.messaging.__mfield_device(mself).__mfield_isMobile(mself),
                            'o-has-current-partner-avatar': props.hasCurrentPartnerAvatar,
                        }"
                        composerLocalId="composer.localId"
                        hasMentionSuggestionsBelowPosition="props.hasMentionSuggestionsBelowPosition"
                        isCompact="props.isCompact"
                        sendShortcuts="props.textInputSendShortcuts"
                        t-on-o-composer-suggestion-clicked="_onComposerSuggestionClicked"
                        t-on-o-composer-text-input-send-shortcut="_onComposerTextInputSendShortcut"
                        t-on-paste="_onPasteTextInput"
                        t-ref="textInput"
                    />
                    <div class="o_Composer_buttons" t-att-class="{ 'o-composer-is-compact': props.isCompact, 'o-mobile': env.messaging.__mfield_device(mself).__mfield_isMobile(mself) }">
                        <div class="o_Composer_toolButtons"
                            t-att-class="{
                                'o-composer-has-current-partner-avatar': props.hasCurrentPartnerAvatar,
                                'o-composer-is-compact': props.isCompact,
                            }">
                            <t t-if="props.isCompact">
                                <div class="o_Composer_toolButtonSeparator"/>
                            </t>
                            <div class="o_Composer_primaryToolButtons" t-att-class="{ 'o-composer-is-compact': props.isCompact }">
                                <Popover position="'top'" t-on-o-emoji-selection="_onEmojiSelection">
                                    <!-- TODO FIXME o-open not possible to code due to https://github.com/odoo/owl/issues/693 -->
                                    <button class="o_Composer_button o_Composer_buttonEmojis o_Composer_toolButton btn btn-light"
                                        t-att-class="{
                                            'o-open': false and state.displayed,
                                            'o-mobile': env.messaging.__mfield_device(mself).__mfield_isMobile(mself),
                                        }"
                                        t-on-keydown="_onKeydownEmojiButton"
                                    >
                                        <i class="fa fa-smile-o"/>
                                    </button>
                                    <t t-set="opened">
                                        <EmojisPopover t-ref="emojisPopover"/>
                                    </t>
                                </Popover>
                                <button class="o_Composer_button o_Composer_buttonAttachment o_Composer_toolButton btn btn-light fa fa-paperclip" t-att-class="{ 'o-mobile': env.messaging.__mfield_device(mself).__mfield_isMobile(mself) }" title="Add attachment" type="button" t-on-click="_onClickAddAttachment"/>
                            </div>
                            <t t-if="props.isExpandable">
                                <div class="o_Composer_secondaryToolButtons">
                                    <button class="btn btn-light fa fa-expand o_Composer_button o_Composer_buttonFullComposer o_Composer_toolButton" t-att-class="{ 'o-mobile': env.messaging.__mfield_device(mself).__mfield_isMobile(mself) }" title="Full composer" type="button" t-on-click="_onClickFullComposer"/>
                                </div>
                            </t>
                        </div>
                        <t t-if="props.isCompact">
                            <t t-call="mail.Composer.actionButtons"/>
                        </t>
                    </div>
                </div>
                <t t-if="hasFooter">
                    <div class="o_Composer_coreFooter" t-att-class="{ 'o-composer-is-compact': props.isCompact }">
                        <t t-if="props.hasThreadTyping">
                            <ThreadTextualTypingStatus class="o_Composer_threadTextualTypingStatus" threadLocalId="composer.__mfield_thread(mself).localId"/>
                        </t>
                        <t t-if="composer.__mfield_attachments(mself).length > 0">
                            <AttachmentList
                                class="o_Composer_attachmentList"
                                t-att-class="{ 'o-composer-is-compact': props.isCompact }"
                                areAttachmentsEditable="true"
                                attachmentsDetailsMode="props.attachmentsDetailsMode"
                                attachmentLocalIds="composer.__mfield_attachments(mself).map(attachment => attachment.localId)"
                                showAttachmentsExtensions="props.showAttachmentsExtensions"
                                showAttachmentsFilenames="props.showAttachmentsFilenames"
                            />
                        </t>
                        <t t-if="!props.isCompact">
                            <t t-call="mail.Composer.actionButtons"/>
                        </t>
                    </div>
                </t>
            </t>
        </div>
    </t>

    <t t-name="mail.Composer.actionButtons" owl="1">
        <div class="o_Composer_actionButtons" t-att-class="{ 'o-composer-is-compact': props.isCompact }">
            <t t-if="props.hasSendButton">
                <button class="o_Composer_actionButton o_Composer_button o_Composer_buttonSend btn btn-primary"
                    t-att-class="{
                        'fa': env.messaging.__mfield_device(mself).__mfield_isMobile(mself),
                        'fa-paper-plane-o': env.messaging.__mfield_device(mself).__mfield_isMobile(mself),
                        'o-last': env.messaging.__mfield_device(mself).__mfield_isMobile(mself) or !props.hasDiscardButton,
                        'o-composer-is-compact': props.isCompact,
                        'o-has-current-partner-avatar': props.hasCurrentPartnerAvatar,
                    }"
                    t-att-disabled="!composer.__mfield_canPostMessage(mself) ? 'disabled' : ''"
                    type="button"
                    t-on-click="_onClickSend"
                >
                    <t t-if="!env.messaging.__mfield_device(mself).__mfield_isMobile(mself)"><t t-if="composer.__mfield_isLog(mself)">Log</t><t t-else="">Send</t></t>
                </button>
            </t>
            <t t-if="!env.messaging.__mfield_device(mself).__mfield_isMobile(mself) and props.hasDiscardButton">
                <button class="o_Composer_actionButton o-last o_Composer_button o_Composer_buttonDiscard btn btn-secondary" t-att-class="{ 'o-composer-is-compact': props.isCompact, 'o-has-current-partner-avatar': props.hasCurrentPartnerAvatar }" type="button" t-on-click="_onClickDiscard">
                    Discard
                </button>
            </t>
        </div>
    </t>

</templates>
