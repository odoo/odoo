<?xml version="1.0" encoding="UTF-8"?>
<templates xml:space="preserve">

    <t t-name="discuss.Call">
        <PttAdBanner/>
        <div class="o-discuss-Call user-select-none d-flex position-relative shadow-sm" t-att-class="{
            'o-fullscreen fixed-top vw-100 vh-100': state.isFullscreen,
            'o-compact': props.compact and !isMobileOs,
            'o-minimized': minimized,
            'o-collapsed': props.thread.callCollapsed,
            'position-relative rounded-3 o-mx-0_5 o-my-0_5': !state.isFullscreen,
            'p-1': !state.isFullscreen,
        }">
            <div t-if="!state.isFullscreen and !props.thread.activeRtcSession" class="o-discuss-Call-resizeBtn justify-content-center align-items-start o-mt-1_5 position-absolute z-3 start-0 top-0">
                <button t-att-title="collapseCallTitle" t-on-click="() => (this.props.thread.callCollapsed = !this.props.thread.callCollapsed)" class="btn rounded-0 border-0 p-2">
                    <i class="oi-lg" t-att-class="{'oi oi-chevron-down': !props.thread.callCollapsed, 'oi oi-chevron-right': props.thread.callCollapsed}"/>
                </button>
            </div>
            <div class="o-discuss-Call-main d-flex flex-grow-1 align-items-center position-relative overflow-auto" t-on-mouseleave="onMouseleaveMain" t-att-class="{
                'ms-4': props.thread.callCollapsed and !props.thread.activeRtcSession,
                'flex-column justify-content-center': !props.thread.callCollapsed or props.thread.activeRtcSession,
            }">
                <div
                    class="o-discuss-Call-mainCards d-flex align-items-center overflow-hidden gap-1"
                    t-att-class="{
                        'h-100 w-100 justify-content-center flex-wrap': !props.thread.callCollapsed or props.thread.activeRtcSession,
                        'h-75 w-75 justify-content-start': props.thread.callCollapsed and !props.thread.activeRtcSession,
                    }"
                    t-attf-style="--height:{{state.tileHeight}}px; --width:{{state.tileWidth}}px;"
                    t-on-click="() => this.showOverlay()"
                    t-on-mousemove="onMousemoveMain"
                    t-ref="grid"
                >
                    <!-- <t t-set="cards" t-value="props.thread.callCollapsed and !props.thread.activeRtcSession ? visibleCards : visibleMainCards"/> -->
                    <t t-foreach="visibleMainCards.slice(0, 6)" t-as="cardData" t-key="cardData.key">
                        <CallParticipantCard
                            cardData="cardData"
                            className="'o-discuss-Call-mainCardStyle'"
                            minimized="minimized"
                            compact="props.compact"
                            overlay="state.overlay"
                            thread="props.thread"
                        />
                    </t>
                </div>

                <!-- Buttons -->
                <t t-if="hasSidebarButton and !props.thread.callCollapsed">
                    <i t-if="state.sidebar" class="o-discuss-Call-sidebarToggler p-2 fs-5 cursor-pointer position-absolute oi oi-arrow-right" title="Hide sidebar" t-on-click="() => this.state.sidebar = false"/>
                    <i t-else="" class="o-discuss-Call-sidebarToggler p-2 fs-5 cursor-pointer position-absolute oi oi-arrow-left" title="Show sidebar" t-on-click="() => this.state.sidebar = true"/>
                </t>
                <div t-if="state.overlay or !isControllerFloating" class="o-discuss-Call-overlay d-flex w-100"
                    t-att-class="{
                        'o-isFloating position-absolute z-2 bottom-0': isControllerFloating,
                        'justify-content-center pb-1': !props.thread.callCollapsed or props.thread.activeRtcSession,
                        'justify-content-end pe-1': props.thread.callCollapsed and !props.thread.activeRtcSession,
                    }">
                    <div t-on-mousemove="onMousemoveOverlay">
                        <CallActionList thread="props.thread" compact="props.compact" fullscreen="{ isActive: state.isFullscreen, enter: () => this.enterFullScreen(), exit: () => this.exitFullScreen() }"/>
                    </div>
                </div>
                <div t-if="hasCallNotifications" class="position-absolute d-flex flex-column-reverse start-0 bottom-0" t-att-class="{ 'ps-5 pb-5': state.isFullscreen, 'ps-2 pb-2': !state.isFullscreen }">
                    <span class="text-bg-800 shadow-lg rounded-1 m-1" t-att-class="{ 'p-4 fs-4': state.isFullscreen, 'p-2': !state.isFullscreen }" t-foreach="rtc.notifications.values()" t-as="notification" t-key="notification.id" t-esc="notification.text"/>
                </div>
            </div>
            <div t-if="state.sidebar and props.thread.activeRtcSession" class="o-discuss-Call-sidebar d-flex align-items-center h-100 flex-column">
                <CallParticipantCard t-foreach="visibleCards" t-as="cardData" t-key="cardData.key"
                    cardData="cardData"
                    className="'o-discuss-Call-sidebarCard w-100 p-1'"
                    thread="props.thread"
                    isSidebarItem="true"
                />
            </div>
            <CallParticipantCard
                t-if="props.thread.videoCount > 0 and state.insetCard"
                cardData="state.insetCard"
                className="'o-discuss-Call-mainCardStyle o-bg-black'"
                thread="props.thread"
                inset.bind="setInset"
            />
        </div>
    </t>

</templates>
