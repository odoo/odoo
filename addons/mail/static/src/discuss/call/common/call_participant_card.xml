<?xml version="1.0" encoding="UTF-8"?>
<templates xml:space="preserve">

    <t t-name="discuss.CallParticipantCard">
        <div class="o-discuss-CallParticipantCard position-relative cursor-pointer d-flex flex-column align-items-center justify-content-center mh-100 mw-100"
            t-att-class="{
                'o-isTalking': isTalking,
                'o-minimized': props.minimized,
                'o-callActiveRtcSession': props.thread.activeRtcSession,
                'o-isInvitation opacity-50': !rtcSession,
                'o-inset shadow': props.inset,
                'pe-none': rtc.state.screenTrack and !rtc.state.screenTrack.enabled,
                'o-small': ui.isSmall or props.minimized,
                'o-active': isActiveRtcSession and !props.inset and props.compact,
                'o-compact': props.compact,
                'rounded-3': !isActiveRtcSession and !props.thread.callCollapsed,
            }"
            t-attf-class="{{ props.className }}"
            t-on-click="onClick"
            t-on-mousedown="onMouseDown"
            t-on-touchmove="onTouchMove"
            t-ref="root"
        >
            <!-- card -->
            <t t-if="!props.isSidebarItem and props.cardData.type === 'screen' and rtc.state.screenTrack and !rtc.state.screenTrack.enabled">
                <div class="o-text-white display-5 gap-3">
                    <button class="pe-auto bg-transparent o-text-white border-0 opacity-25 opacity-75-hover" t-ref="resumeStream" t-on-click.stop="() => (this.rtc.state.screenTrack.enabled = true)">
                        <i class="fa fa-fw" t-att-class="{ 'fa-play-circle-o': resumeStreamHover.isHover, 'fa-pause-circle-o': !resumeStreamHover.isHover }"/> <span><t t-if="resumeStreamHover.isHover">Resume stream</t><t t-else="">Stream paused</t></span>
                    </button>
                </div>
            </t>
            <CallParticipantVideo t-if="hasVideo" session="rtcSession" type="props.cardData.type" inset="props.inset"/>
            <div t-else="" class="o-discuss-CallParticipantCard-avatar d-flex align-items-center justify-content-center h-100 w-100 rounded-3" t-att-class="{ 'o-minimized': props.minimized, 'p-3': !props.minimized and !props.inset and !props.compact, 'o-isRemoteVideo': isRemoteVideo }" draggable="false">
                <img t-if="!showRemoteWarning" alt="Avatar" class="h-100 rounded-circle o_object_fit_cover" t-att-src="channelMember?.persona.avatarUrl" draggable="false" t-att-class="{
                    'o-isTalking': isTalking,
                    'o-callCollapsed': props.thread.callCollapsed,
                    'o-isInvitation': !rtcSession,
                }"/>
            </div>
            <t t-if="rtcSession">
                <!-- overlay -->
                <span class="o-discuss-CallParticipantCard-overlay o-discuss-CallParticipantCard-overlayTop z-1 position-absolute d-flex overflow-hidden rounded-2 top-0" t-att-class="{
                    'end-0': props.thread.callCollapsed and !props.thread.activeRtcSession,
                    'start-0': !props.thread.callCollapsed or props.thread.activeRtcSession,
                    'o-proportional-container w-50': isSmall,
                }">
                    <span class="rounded-2 text-truncate w-100 o-proportional-text o-discuss-CallParticipantCard-overlayCardName fw-bold small" t-att-class="{'o-minimized px-1': isSmall, 'px-1 py-0': !isSmall }">
                        <t t-set="hasName" t-value="!props.minimized and !props.inset and props.overlay"/>
                        <i t-if="hasRaisingHand" class="fa fa-fw fa-hand-paper-o" t-att-class="{ 'me-1': hasName }"/>
                        <i t-if="rtcSession.is_muted and !rtcSession.is_deaf" class="fa fa-fw fa-microphone-slash" t-att-class="{ 'me-1': hasName }"/>
                        <i t-if="rtcSession.is_deaf" class="fa fa-fw fa-deaf" t-att-class="{ 'me-1': hasName }"/>
                        <i t-if="hasMediaError" class="fa fa-fw text-danger" t-att-class="{ 'fa-repeat': rootHover.isHover, 'fa-exclamation-triangle': !rootHover.isHover, 'me-1': hasName }"/>
                        <i t-if="showConnectionState" class="fa fa-fw fa-exclamation-triangle text-warning" t-att-class="{ 'me-1': hasName }"/>
                        <span t-if="!props.minimized and !props.inset and props.overlay" class="opacity-75" t-esc="name"/>
                    </span>
                </span>
                <span t-if="showRemoteWarning" class="o-discuss-CallParticipantCard-overlay o-proportional-container z-1 w-50 position-absolute d-flex align-items-center justify-content-center overflow-hidden">
                    <span class="fw-bolder p-1 rounded-2 o-video-text o-proportional-text">Video visible in the call tab</span>
                </span>
                <button t-if="popover.isOpen or (isContextMenuAvailable and ((!isMobileOS and rootHover.isHover) or (isMobileOS and !props.minimized)))" t-on-click="onContextMenu" class="o-discuss-CallParticipantCard-contextButton btn btn-secondary btn-sm rounded-circle position-absolute border-0 top-0 end-0 smaller p-1" title="Participant options" t-ref="contextMenuAnchor">
                    <i class="fa fa-chevron-down fa-fw"/>
                </button>
            </t>
        </div>
    </t>

</templates>
