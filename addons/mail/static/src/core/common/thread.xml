<?xml version="1.0" encoding="UTF-8"?>
<templates xml:space="preserve">

<t t-name="mail.Thread">
    <t t-if="!env.inChatter" t-call="mail.Thread.jumpUnread"/>
    <div class="o-mail-Thread position-relative flex-grow-1 d-flex flex-column overflow-auto" t-att-class="{ 'pb-5': env.inChatter?.aside, 'pb-4': !env.inChatter?.aside, 'px-3': !env.inChatter and !props.isInChatWindow }" t-ref="messages" tabindex="-1">
        <t t-if="!props.thread.isEmpty or props.thread.loadOlder or props.thread.hasLoadingFailed" name="content">
            <div class="d-flex flex-column position-relative flex-grow-1" t-att-class="{'justify-content-end': !env.inChatter and props.thread.model !== 'mail.box'}">
                <span class="position-absolute w-100 invisible" t-att-class="props.order === 'asc' ? 'bottom-0' : 'top-0'" t-ref="present-treshold" t-att-style="`height: Min(${PRESENT_THRESHOLD}px, 100%)`"/>
                <t t-set="currentDay" t-value="0"/>
                <t t-if="props.order === 'asc'">
                    <t t-if="props.thread.loadOlder and !props.thread.isTransient and !props.thread.hasLoadingFailed" t-call="mail.Thread.loadOlder"/>
                    <t t-if="props.thread.hasLoadingFailed" t-call="mail.Thread.loadingError"/>
                </t>
                <span t-else="" class="pt-1" t-ref="load-newer"/>
                <t t-set="messages" t-value="orderedMessages"/>
                <t t-if="state.mountedAndLoaded" t-foreach="messages" t-as="msg" t-key="msg.id">
                    <t t-set="prevMsg" t-value="messages[msg_index -1]"/>
                    <t t-if="msg.dateDay !== currentDay and props.showDates">
                        <DateSection date="msg.dateDay" className="'pt-2 px-2'"/>
                        <t t-set="currentDay" t-value="msg.dateDay"/>
                    </t>
                    <div t-if="msg.threadAsFirstUnread?.eq(props.thread)" class="o-mail-Thread-newMessage d-flex align-items-center fw-bolder z-1 px-2">
                        <hr class="flex-grow-1 border-danger opacity-100"/><span class="ps-2 pe-1 bg-danger o-text-white rounded text-uppercase">New</span>
                    </div>
                    <Message
                        asCard="props.thread.model === 'mail.box'"
                        className="getMessageClassName(msg)"
                        isInChatWindow="props.isInChatWindow"
                        message="msg"
                        previousMessage="prevMsg"
                        registerMessageRef="registerMessageRef"
                        messageToReplyTo="props.messageToReplyTo"
                        squashed="isSquashed(msg, prevMsg)"
                        onParentMessageClick.bind="() => msg.parentMessage and env.messageHighlight?.highlightMessage(msg.parentMessage, props.thread)"
                        thread="props.thread"
                        messageEdition="props.messageEdition"
                        isFirstMessage="msg_first"
                        hasActions="props.messageActions and !msg.eq(props.thread.from_message_id)"
                        showDates="props.showDates"
                    />
                </t>
                <span t-if="props.order === 'asc'" class="pt-1" t-ref="load-newer"/>
                <t t-else="">
                    <t t-if="props.thread.loadOlder and !props.thread.isTransient and !props.thread.hasLoadingFailed" t-call="mail.Thread.loadOlder"/>
                    <t t-if="props.thread.hasLoadingFailed" t-call="mail.Thread.loadingError"/>
                </t>
            </div>
        </t>
        <t t-else="">
            <div class="o-mail-Thread-empty d-flex flex-column align-items-center justify-content-center text-muted h-100" t-att-class="{'p-4': props.showEmptyMessage}">
                <t t-if="props.thread.isLoaded and props.showEmptyMessage">
                    <t name="empty-message">
                        <span class="fs-1" style="filter: grayscale(1);">ðŸ˜¶</span>
                        <span>The conversation is empty.</span>
                    </t>
                </t>
            </div>
        </t>
        <t t-call="mail.Thread.jumpPresent"/>
    </div>
</t>

<t t-name="mail.Thread.jumpPresent">
    <button t-if="props.showJumpPresent and state.showJumpPresent" class="o-mail-Thread-jumpPresent position-fixed p-2 rounded-circle lh-1 m-n3 user-select-none btn btn-light shadow-sm border border-secondary" t-ref="jump-present" t-on-click="() => this.jumpToPresent()" title="Jump to Present"><i class="oi text-muted" t-att-class="{ 'oi-chevron-down': props.order === 'asc', 'oi-chevron-up': props.order !== 'asc' }"/></button>
</t>

<t t-name="mail.Thread.jumpUnread">
    <span t-if="props.thread.showUnreadBanner" class="o-mail-Thread-banner d-flex cursor-pointer border-bottom border-warning smaller fw-bolder">
        <t t-set="alertClass" t-value="'alert alert-warning m-0 border-start-0 o-mail-Thread-bannerHover rounded-0 px-2 py-1 smaller'"/>
        <span t-attf-class="{{ alertClass }} flex-grow-1" t-on-click="onClickUnreadMessagesBanner" t-esc="newMessageBannerText"/>
        <span t-attf-class="{{ alertClass }}" t-on-click="() => props.thread.markAsRead({ sync: true })">Mark as Read<i class="ms-2 fa fa-check-square"/></span>
    </span>
</t>
<t t-name="mail.Thread.loadOlder">
    <button class="btn btn-link" t-on-click="onClickLoadOlder" t-ref="load-older">Load More</button>
</t>

<t t-name="mail.Thread.loadingError">
    <div class="d-flex flex-grow-1 align-items-center justify-content-center flex-column">
        <div class="o-mail-Thread-error">
            An error occurred while fetching messages.
        </div>
        <button class="btn btn-link" t-on-click="onClickLoadOlder">
            Click here to retry
        </button>
    </div>
</t>
</templates>
