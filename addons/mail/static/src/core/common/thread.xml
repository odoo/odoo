<?xml version="1.0" encoding="UTF-8"?>
<templates xml:space="preserve">

<t t-name="mail.Thread">
    <t t-if="env.inChatter" t-call="mail.Thread.jumpPresent"/> <!-- chatter has its own scrollable, this ensures proper sticky showing -->
    <t t-else="" t-call="mail.Thread.jumpUnread"/>
    <div class="o-mail-Thread position-relative flex-grow-1 d-flex flex-column overflow-auto" t-att-class="{ 'pb-4':  props.showJumpPresent and !state.showJumpPresent, 'px-3': !env.inChatter and !props.isInChatWindow }" t-ref="messages" tabindex="-1">
        <t t-if="!props.thread.isEmpty or props.thread.loadOlder or props.thread.hasLoadingFailed" name="content">
            <div class="d-flex flex-column position-relative flex-grow-1" t-att-class="{'justify-content-end': !env.inChatter and props.thread.model !== 'mail.box'}">
                <span class="position-absolute w-100 invisible" t-att-class="props.order === 'asc' ? 'bottom-0' : 'top-0'" t-ref="present-treshold" t-att-style="`height: Min(${PRESENT_THRESHOLD}px, 100%)`"/>
                <t t-set="currentDay" t-value="0"/>
                <t t-if="props.order === 'asc'">
                    <t t-if="props.thread.loadOlder and !props.thread.isTransient and !props.thread.hasLoadingFailed" t-call="mail.Thread.loadOlder"/>
                    <t t-if="props.thread.hasLoadingFailed" t-call="mail.Thread.loadingError"/>
                </t>
                <span t-else="" t-ref="load-newer"/>
                <t t-set="messages" t-value="props.order === 'asc' ? props.thread.nonEmptyMessages : [...props.thread.nonEmptyMessages].reverse()"/>
                <t t-if="state.mountedAndLoaded" t-foreach="messages" t-as="msg" t-key="msg.id">
                    <t t-set="prevMsg" t-value="messages[msg_index -1]"/>
                    <t t-if="msg.dateDay !== currentDay and props.showDates">
                        <DateSection date="msg.dateDay" className="'pt-2'"/>
                        <t t-set="currentDay" t-value="msg.dateDay"/>
                    </t>
                    <div t-if="msg.threadAsFirstUnread" class="o-mail-Thread-newMessage d-flex align-items-center fw-bolder z-index-1">
                        <hr class="ms-2 flex-grow-1 border border-danger opacity-50"/><span class="px-2 text-danger">New messages</span><hr class="me-2 flex-grow-1 border border-danger opacity-50"/>
                    </div>
                    <t t-if="msg.isNotification">
                        <t t-call="mail.NotificationMessage"/>
                    </t>
                    <Message t-else=""
                        className="getMessageClassName(msg)"
                        isInChatWindow="props.isInChatWindow"
                        message="msg"
                        registerMessageRef="registerMessageRef"
                        messageToReplyTo="props.messageToReplyTo"
                        squashed="isSquashed(msg, prevMsg)"
                        onParentMessageClick.bind="() => msg.parentMessage and env.messageHighlight?.highlightMessage(msg.parentMessage, props.thread)"
                        thread="props.thread"
                        messageEdition="props.messageEdition"
                        isFirstMessage="msg_first"
                        hasActions="props.messageActions"
                        showDates="props.showDates"
                    />
                </t>
                <span t-if="props.order === 'asc'" t-ref="load-newer"/>
                <t t-else="">
                    <t t-if="props.thread.loadOlder and !props.thread.isTransient and !props.thread.hasLoadingFailed" t-call="mail.Thread.loadOlder"/>
                    <t t-if="props.thread.hasLoadingFailed" t-call="mail.Thread.loadingError"/>
                </t>
            </div>
        </t>
        <t t-else="">
            <div class="o-mail-Thread-empty d-flex flex-column align-items-center justify-content-center text-muted fst-italic h-100" t-att-class="{'p-4': props.showEmptyMessage}">
                <t t-if="props.thread.isLoaded">
                    <t t-if="props.thread.isEmpty and props.thread.model === 'mail.box'">
                    <t t-if="props.thread.id === 'inbox' and state.mountedAndLoaded">
                        <div t-if="store.self.notification_preference !== 'inbox'" class="align-items-center text-center">
                            <h4 class="mb-3 fw-bolder">
                                Your inbox is empty
                            </h4>
                            <t t-call="mail.Thread.inboxHint"/>
                        </div>
                        <div t-else="" class="align-items-center text-center">
                            <h4 class="mb-3 fw-bolder">
                                Congratulations, your inbox is empty
                            </h4>
                            New messages appear here.
                        </div>
                    </t>
                    <t t-if="props.thread.id === 'starred'">
                        <h4 class="mb-3 fw-bolder">
                            No starred messages
                        </h4>
                        You can mark any message as 'starred', and it shows up in this mailbox.
                    </t>
                    <t t-if="props.thread.id === 'history'">
                        <img src="/web/static/img/neutral_face.svg" alt="History"/>
                        <h4 class="mb-3 fw-bolder">
                            No history messages
                        </h4>
                        Messages marked as read will appear in the history.
                    </t>
                    </t>
                    <t t-elif="props.showEmptyMessage">
                        There are no messages in this conversation.
                    </t>
                </t>
            </div>
        </t>
    </div>
    <t t-if="!env.inChatter" t-call="mail.Thread.jumpPresent"/>
</t>

<t t-name="mail.Thread.inboxHint">
    <t t-esc="preferenceButtonText.before"/>
    <button class="btn btn-link m-0 p-0 align-baseline o-hover-text-underline" t-on-click="onClickPreferences" t-esc="preferenceButtonText.inside"/>
    <t t-esc="preferenceButtonText.after"/>
</t>

<t t-name="mail.Thread.jumpPresent">
    <span t-if="props.showJumpPresent and state.showJumpPresent" t-att-class="{
        'm-0 px-4 position-sticky top-0': env.inChatter,
    }" class="o-mail-Thread-banner o-mail-Thread-bannerHover d-flex justify-content-between alert alert-primary border-0 rounded-0 mb-0 py-1 cursor-pointer shadow-sm small fw-bold" t-on-click="() => this.jumpToPresent()">
        <span>You're viewing older messages</span>
        <span>Jump to Present<i class="ms-2 fa" t-att-class="{ 'fa-caret-up': props.order !== 'asc', 'fa-caret-down': props.order === 'asc' }"/></span>
    </span>
</t>

<t t-name="mail.Thread.jumpUnread">
    <span t-if="props.thread.selfMember?.localMessageUnreadCounter > 0" class="o-mail-Thread-banner d-flex cursor-pointer shadow-sm small fw-bold">
        <t t-set="alertClass" t-value="'alert alert-info m-0 border-start-0 o-mail-Thread-bannerHover rounded-0 py-1'"/>
        <span t-attf-class="{{ alertClass }} flex-grow-1" t-on-click="onClickUnreadMessagesBanner" t-esc="newMessageBannerText"/>
        <span t-attf-class="{{ alertClass }}" t-on-click="() => props.thread.markAsRead({ sync: true })">Mark as Read<i class="ms-2 fa fa-check-square"/></span>
    </span>
</t>
<t t-name="mail.Thread.loadOlder">
    <button class="btn btn-link" t-on-click="onClickLoadOlder" t-ref="load-older">Load More</button>
</t>

<t t-name="mail.Thread.loadingError">
    <div class="d-flex flex-grow-1 align-items-center justify-content-center flex-column">
        <div class="o-mail-Thread-error">
            An error occurred while fetching messages.
        </div>
        <button class="btn btn-link" t-on-click="onClickLoadOlder">
            Click here to retry
        </button>
    </div>
</t>

<t t-name="mail.NotificationMessage">
    <div class="o-mail-NotificationMessage text-break mx-auto text-500 small px-3 text-center" t-on-click="onClickNotification" t-att-class="{
        'mt-2': prevMsg and !prevMsg.isNotification,
    }" t-ref="root">
        <i t-if="msg.notificationIcon" t-attf-class="{{ msg.notificationIcon }} me-1"/>
        <span class="o-mail-NotificationMessage-author d-inline" t-if="msg.author and !msg.body.includes(escape(msg.author.name))" t-esc="msg.author.name"/> <t t-out="msg.body"/>
    </div>
</t>

</templates>
