<?xml version="1.0" encoding="UTF-8" ?>
<templates xml:space="preserve">

<t t-name="mail.DiscussActions">
    <div class="o-mail-DiscussActions flex-shrink-0 d-flex" t-att-class="{ 'align-items-center': props.inline,'flex-column': !props.inline }">
        <span t-if="props.quick?.length" class="o-mail-DiscussActions-group btn-group" t-att-class="{ 'flex-column w-100': !props.inline, 'o-inline': props.inline, 'o-rounded-bubble': inlinePretty, 'o-ugly': !props.pretty }">
            <t t-set="groupBefore" t-value="true"/>
            <t t-foreach="props.quick" t-as="action" t-key="action.id" t-call="mail.DiscussActions.action">
                <t t-set="action" t-value="action"/>
                <t t-set="groupSize" t-value="props.quick.length"/>
            </t>
        </span>
        <t t-else="" t-set="groupBefore" t-value="false"/>
        <t t-if="groupBefore" t-call="mail.DiscussActions.groupSeparator"/>
        <span t-if="props.other?.length" class="o-mail-DiscussActions-group btn-group" t-att-class="{ 'flex-column w-100': !props.inline, 'o-inline': props.inline, 'o-rounded-bubble': inlinePretty, 'o-ugly': !props.pretty }">
            <t t-set="groupBefore" t-value="true"/>
            <t t-foreach="props.other" t-as="action" t-key="action.id" t-call="mail.DiscussActions.action">
                <t t-set="action" t-value="action"/>
                <t t-set="groupSize" t-value="props.other.length"/>
            </t>
        </span>
        <t t-else="" t-set="groupBefore" t-value="false"/>
        <t t-if="groupBefore" t-call="mail.DiscussActions.groupSeparator"/>
        <t t-if="props.inline" t-set="group" t-value="(props.group ?? []).slice().reverse()"/>
        <t t-else="" t-set="group" t-value="(props.group ?? [])"/>
        <t t-foreach="group" t-as="group" t-key="group_index">
            <span t-if="group.length" class="o-mail-DiscussActions-group btn-group" t-att-class="{ 'flex-column w-100': !props.inline, 'o-inline': props.inline, 'o-rounded-bubble': inlinePretty, 'o-ugly': !props.pretty }">
                <t t-foreach="group" t-as="action" t-key="action.id" t-call="mail.DiscussActions.action">
                    <t t-set="action" t-value="action"/>
                    <t t-set="groupSize" t-value="group.length"/>
                </t>
            </span>
            <t t-if="!group_last" t-call="mail.DiscussActions.groupSeparator"/>
        </t>
    </div>
</t>

<t t-name="mail.DiscussActions.groupSeparator">
    <span t-if="props.inline" class="text-muted align-self-stretch" t-att-class="{ 'ms-2 me-1': env.inDiscussApp }"/>
    <hr t-else="" class="mx-2 my-1 o-rounded-bubble"/>
</t>

<t t-name="mail.DiscussActions.action">
    <t t-if="action.dropdown">
        <Dropdown menuClass="action.dropdown.menuClass">
            <t t-call="mail.DiscussActions.actionMain"/>
            <t t-set-slot="content">
                <t t-call="{{ action.dropdown.template }}">
                    <t t-set="templateParams" t-value="action.dropdown.templateParams?.(this)"/>
                </t>
            </t>
        </Dropdown>
    </t>
    <t t-else="" t-call="mail.DiscussActions.actionMain"/>
</t>

<t t-name="mail.DiscussActions.actionMain">

    <t t-set="btnClass" t-value="Object.entries({
        'btn btn-secondary m-0 btn-group-item': true,
        'o-first': action_first,
        'o-last': action_last,
        'rounded-circle': props.pretty and props.inline,
        'o-ugly': !props.pretty,
        'px-1': !props.pretty and props.inline,
        'o-inline': props.inline,
        'o-p-0_5': inlinePretty and !(ui.isSmall and props.inline),
        'border-0': inlinePretty,
        'o-p-1_5': props.inline and ui.isSmall,
        'text-start px-2 o-fs-small': !props.inline and !ui.isSmall,
        'active': action.isActive,
        'o-mail-ChatWindow-command': env.inChatWindow,
        'o-danger': action.danger,
        'o-success': action.success,
    }).filter(([_, val]) => val).map(([key, _]) => key).join(' ')"/>
    <t t-set="attrs" t-value="{
        'disabled': action.disabledCondition,
        'title': action.name,
        'name': action.id,
    }"/>
    <DropdownItem t-if="props.dropdown" class="btnClass" tag="'button'" onSelected="(ev) => action.onSelected(ev)">        
        <t t-call="mail.DiscussActions.actionContent"/>
    </DropdownItem>
    <button t-else="" t-att-class="btnClass" t-attf-class="{{ env.inCallActionList ? 'o-discuss-CallActionList-dropdownItem' : '' }}" t-att="attrs" t-on-click="(ev) => action.onSelected(ev)">
        <t t-call="mail.DiscussActions.actionContent"/>
    </button>
</t>

<t t-name="mail.DiscussActions.actionContent">
    <t t-if="action.icon?.template" t-call="{{ action.icon.template }}">
        <t t-set="templateParams" t-value="action.icon.params"/>
    </t>
    <i t-elif="props.inline and action.iconLarge" t-attf-class="{{ action.iconLarge }}" class="fa-fw"/><i t-elif="action.icon" t-attf-class="{{ action.icon }}" class="fa-fw"/> <span t-if="action.text" t-esc="action.text"/>
    <span t-if="!props.inline" class="o-mail-DiscussActions-actionLabel fw-bold mx-1" t-attf-class="{{ action.nameClass }}" t-out="action.name"/>
</t>

</templates>