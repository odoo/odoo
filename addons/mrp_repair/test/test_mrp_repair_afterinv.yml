-
  In order to test Invoice Method 'After Repair' with giving the access rights of mrp user.
-
  !context
    uid: 'res_mrp_repair_user'
-
  I confirm Repair order taking Invoice Method 'After Repair'.
-
  !workflow {model: mrp.repair, action: repair_confirm, ref: mrp_repair_rmrp0}
-
  I start the Repairing process by clicking on "Start Repair" button for Invoice Method 'After Repair'.
-
  !workflow {model: mrp.repair, action: repair_ready, ref: mrp_repair_rmrp0}
-
  I check the state is in "Under Repair".
-
  !assert {model: mrp.repair, id: mrp_repair_rmrp0}:
      - state == 'under_repair'
-
  Repairing process for product is in Done state and I end Repair process by clicking on "End Repair" button.
-
  !workflow {model: mrp.repair, action: action_repair_end, ref: mrp_repair_rmrp0}
-
  I define Invoice Method 'After Repair' option in this Repair order.
  so I create invoice by clicking on "Make Invoice" wizard.
-
  !record {model: mrp.repair.make_invoice, id: mrp_repair_make_invoice_0}:
    group: 1
-
  I click on "Create Invoice" button of this wizard to make invoice.
-
  !python {model: mrp.repair.make_invoice}: |
    self.make_invoices(cr, uid, [ref("mrp_repair_make_invoice_0")], {"active_ids": [ref("mrp_repair.mrp_repair_rmrp0")]})
-
  I check that invoice is created for this Repair order.
-
  !python {model: mrp.repair}: |
     repair_id = self.browse(cr, uid, [ref('mrp_repair_rmrp0')], context=context)[0]
     assert repair_id.invoice_id.id, "No invoice exists for this repair order"
