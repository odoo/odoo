-
  In order to check the Account_voucher module with multi-currency in OpenERP, 
  I create 2 Invoices in USD and make 2 Payments one in USD and another in EUR, based on the currency rating on that particular date
-
  I set the income and expense currency accounts on the main company
-
  !python {model: res.company}: |
    from datetime import datetime
    vals = {
      'income_currency_exchange_account_id': ref('account.o_expense'),
      'expense_currency_exchange_account_id': ref('account.o_expense')}
    self.write(cr, uid, ref('base.main_company'), vals)
-
  I modify the debtor account in order to set the currency_id = USD
-
  !python {model: account.account}: |
    from datetime import datetime
    ids = self.search(cr, uid, [('name', 'ilike', 'debtor')])
    self.write(cr, uid, ids, {'currency_id': ref('base.USD')})
-
  I create currency USD in OpenERP for January of 1.333333 Rate
-
  !python {model: res.currency.rate}: |
    from datetime import datetime
    curr_id = self.pool.get('res.currency').search(cr, uid, [('name', '=', 'USD')])[0]
    date = '%s-01-01' %(datetime.now().year)
    ids = self.search(cr, uid, [('currency_id', '=', curr_id), ('name', '=', date)])
    self.write(cr, uid, ids, {'rate': 1.333333})
-
  I create currency USD in OpenERP for February of 1.250000 Rate
-
  !record {model: res.currency.rate, id: feb_usd}:
    currency_id: base.USD
    name: !eval "'%s-02-01' %(datetime.now().year)"
    rate: 1.250000
-
  I create currency USD in OpenERP for March of 1.111111 Rate
-
  !record {model: res.currency.rate, id: mar_usd}:
    currency_id: base.USD
    name: !eval "'%s-03-01' %(datetime.now().year)"
    rate: 1.111111
-
  I create currency USD in OpenERP for April of 1.052632 Rate
-
  !record {model: res.currency.rate, id: apr_usd}:
    currency_id: base.USD
    name: !eval "'%s-04-01' %(datetime.now().year)"
    rate: 1.052632
-
  I create a bank journal with EUR as currency
-
  !record {model: account.journal, id: bank_journal_EUR}:
    name: Bank Journal(EUR)
    code: BEUR
    type: bank
    analytic_journal_id: analytic.sit
    sequence_id: account.sequence_bank_journal
    default_debit_account_id: account.cash
    default_credit_account_id: account.cash
    company_id: base.main_company
-
  I create a bank journal with USD as currency
-
  !record {model: account.journal, id: bank_journal_USD}:
    name: Bank Journal(USD)
    code: BUSD
    type: bank
    analytic_journal_id: analytic.sit
    sequence_id: account.sequence_bank_journal
    default_debit_account_id: account_cash_usd_id
    default_credit_account_id: account_cash_usd_id
    currency: base.USD
    company_id: base.main_company
-
  I create the first invoice on 1st January for 200 USD
-
  !record {model: account.invoice, id: account_first_invoice_jan_michal}:
    account_id: account.a_recv
    company_id: base.main_company
    currency_id: base.USD
    date_invoice: !eval "'%s-01-01' %(datetime.now().year)"
    period_id: account.period_1
    invoice_line:
      - account_id: account.a_sale
        name: '[PCSC234] PC Assemble SC234'
        price_unit: 200.0
        quantity: 1.0
        product_id: product.product_product_3
        uos_id: product.product_uom_unit
    journal_id: account.sales_journal
    partner_id: base.res_partner_19
    reference_type: none
-
  I Validate invoice by clicking on Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_first_invoice_jan_michal}
-
  I check that first invoice move is correct for debtor account(debit - credit == 150)
-
  !python {model: account.invoice}: |
    from openerp.tools import float_compare
    invoice_id = self.browse(cr, uid, ref("account_first_invoice_jan_michal"))
    assert invoice_id.move_id, "Move not created for open invoice"
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    assert (float_compare(move_line.debit - move_line.credit, 150.00, precision_digits=2) == 0), "Invoice move is incorrect for debtors account"
-
  I create the second invoice on 1st February for 100 USD
-
  !record {model: account.invoice, id: account_second_invoice_feb_michal}:
    account_id: account.a_recv
    company_id: base.main_company
    currency_id: base.USD
    date_invoice: !eval "'%s-02-01' %(datetime.now().year)"
    period_id: account.period_2
    invoice_line:
      - account_id: account.a_sale
        name: '[PCSC234] PC Assemble SC234'
        price_unit: 100.0
        quantity: 1.0
        product_id: product.product_product_3
        uos_id: product.product_uom_unit
    journal_id: account.sales_journal
    partner_id: base.res_partner_19
    reference_type: none
-
  I Validate invoice by clicking on Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_second_invoice_feb_michal}
-
  I check that second invoice move is correct for debtor account (debit - credit == 80)
-
  !python {model: account.invoice}: |
    from openerp.tools import float_compare
    invoice_id = self.browse(cr, uid, ref("account_second_invoice_feb_michal"))
    assert invoice_id.move_id, "Move not created for open invoice"
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    assert (float_compare(move_line.debit - move_line.credit, 80, precision_digits=2) == 0), "Invoice move is incorrect for debtors account"
-
  I set the context that will be used for the encoding of all the vouchers of this file
-
  !context
    'type': 'receipt'
-
  I create the first voucher of payment with values 200 EUR, journal EUR
-
  !record {model: account.voucher, id: account_voucher_1_case2b, view: view_vendor_receipt_form}:
    account_id: account.cash
    amount: 200.0
    company_id: base.main_company
    journal_id: bank_journal_EUR
    partner_id: base.res_partner_19
    period_id: account.period_3
    date: !eval time.strftime("%Y-03-01")
    payment_option: 'with_writeoff'
    writeoff_acc_id: account.a_expense
    comment: 'Write Off'
    name: 'First payment: Case 2 USD/EUR DR USD'

-
  I fill amounts 130 for the invoice of 200$ and 70 for the invoice of 100$>
-
  !python {model: account.voucher}: |
    from openerp.tools import float_compare
    vals = {}
    voucher_id = self.browse(cr, uid, ref('account_voucher_1_case2b'))
    data = []
    for item in voucher_id.line_cr_ids:
        if float_compare(item.amount_unreconciled, 150.00, precision_digits=2) == 0:
            data += [(item.id, 130.0)]
        else:
            data += [(item.id, 70.0)]
    for line_id, amount in data:
        self.pool.get('account.voucher.line').write(cr, uid, [line_id], {'amount': amount})
    assert (voucher_id.state=='draft'), "Voucher is not in draft state"
-
  I confirm the voucher
-
  !python {model: account.voucher}: |
    voucher = self.search(cr, uid, [('name', '=', 'First payment: Case 2 USD/EUR DR USD'), ('partner_id', '=', ref('base.res_partner_19'))])
    self.signal_workflow(cr, uid, voucher, 'proforma_voucher')
-
  I check that the move of my voucher is valid
-
  !python {model: account.voucher}: |
    voucher = self.search(cr, uid, [('name', '=', 'First payment: Case 2 USD/EUR DR USD'), ('partner_id', '=', ref('base.res_partner_19'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', voucher_id.move_id.id)])
    for move_line in move_line_obj.browse(cr, uid, move_lines):
        assert move_line.state == 'valid', "Voucher move is not valid"
-
  I check that my debtor account is correct
-
  I check that the debtor account has 2 new lines with 144.44 and 77.78 in amount_currency columns and their credit columns are 130 and 70
-
  !python {model: account.voucher}: |
    from openerp.tools import float_compare
    voucher = self.search(cr, uid, [('name', '=', 'First payment: Case 2 USD/EUR DR USD'), ('partner_id', '=', ref('base.res_partner_19'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', voucher_id.move_id.id)])
    for move_line in move_line_obj.browse(cr, uid, move_lines):
        if float_compare(move_line.credit, 70.0, precision_digits=2) == 0:
            assert float_compare(move_line.amount_currency, -77.78, precision_digits=2) == 0, "Wrong debtor entry"
        if float_compare(move_line.credit, 130.0, precision_digits=2) == 0:
            assert float_compare(move_line.amount_currency, -144.44, precision_digits=2) == 0, "Wrong debtor entry"
-
  I check the residual amount of Invoice1, should be 55.56 in residual currency and 20 in amount_residual
-
  !python {model: account.invoice}: |
    from openerp.tools import float_compare
    invoice_id = self.browse(cr, uid, ref("account_first_invoice_jan_michal"))
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('invoice', '=', invoice_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    assert (float_compare(move_line.amount_residual_currency, 55.56, precision_digits=2) == 0 and float_compare(move_line.amount_residual, 20, precision_digits=2) == 0) , "Residual amount is not correct for first Invoice"
-
  I check the residual amount of Invoice2, should be 22.22 in residual currency and 10 in amount_residual
-
   !python {model: account.invoice}: |
    from openerp.tools import float_compare
    invoice_id = self.browse(cr, uid, ref("account_second_invoice_feb_michal"))
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('invoice', '=', invoice_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    assert (float_compare(move_line.amount_residual_currency, 22.22, precision_digits=2) == 0 and float_compare(move_line.amount_residual, 10, precision_digits=2) == 0) , "Residual amount is not correct for second Invoice"
-
  I create the second voucher of payment with values 80 USD, journal USD
-
  !record {model: account.voucher, id: account_voucher_2_case2b, view: view_vendor_receipt_form}:
    account_id: account.cash
    amount: 80.0
    company_id: base.main_company
    journal_id: bank_journal_USD
    partner_id: base.res_partner_19
    period_id: account.period_3
    date: !eval time.strftime("%Y-04-01")
    payment_option: 'with_writeoff'
    writeoff_acc_id: account.a_expense
    comment: 'Write Off'
    name: 'Second payment: Case 2 SUPPL USD/EUR DR USD'

-
  and I fully reconcil the 2 previous invoices
-
  !python {model: account.voucher}: |
    from openerp.tools import float_compare
    vals = {}
    voucher_id = self.browse(cr, uid, ref('account_voucher_2_case2b'))
    data = []
    for item in voucher_id.line_cr_ids:
        if float_compare(item.amount_unreconciled, 55.56, precision_digits=2) == 0:
            data += [(item.id, 55.56)]
        else:
            data += [(item.id, 22.22)]
    for line_id, amount in data:
        self.pool.get('account.voucher.line').write(cr, uid, [line_id], {'amount': amount})
    assert (voucher_id.state=='draft'), "Voucher is not in draft state"
-
  I check that writeoff amount computed is 2.22
-
  !python {model: account.voucher}: |
    from openerp.tools import float_compare
    voucher = self.search(cr, uid, [('name', '=', 'Second payment: Case 2 SUPPL USD/EUR DR USD'), ('partner_id', '=', ref('base.res_partner_19'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    assert (float_compare(round(voucher_id.writeoff_amount, 2), 2.22, precision_digits=2) == 0), "Writeoff amount is not 2.22$"
-
  I confirm the voucher
-
  !python {model: account.voucher}: |
    voucher = self.search(cr, uid, [('name', '=', 'Second payment: Case 2 SUPPL USD/EUR DR USD'), ('partner_id', '=', ref('base.res_partner_19'))])
    self.signal_workflow(cr, uid, voucher, 'proforma_voucher')
-
  I check that my voucher state is posted
-
  !python {model: account.voucher}: |
    voucher = self.search(cr, uid, [('name', '=', 'Second payment: Case 2 SUPPL USD/EUR DR USD'), ('partner_id', '=', ref('base.res_partner_19'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    assert voucher_id.state == 'posted', "Voucher state is not posted"
-
  I check that my debtor account is correct
-
  I check that the debtor account has 2 new lines with -55.56 and -22.22 in amount_currency columns and their credit columns are respectively 52.78 and 21.11 and currency is USD($).
-
  I check that my currency rate difference is correct.
-
  I check that my writeoff is correct. 2.11 in credit and 2.22 in amount_currency
-
  !python {model: account.voucher}: |
    from openerp.tools import float_compare
    voucher = self.search(cr, uid, [('name', '=', 'Second payment: Case 2 SUPPL USD/EUR DR USD'), ('partner_id', '=', ref('base.res_partner_19'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', voucher_id.move_id.id)])
    reconcile_a = reconcile_b = False
    for move_line in move_line_obj.browse(cr, uid, move_lines):
        if float_compare(move_line.amount_currency, -22.22, precision_digits=2) == 0:
            assert move_line.reconcile_id.id, "The invoice of 200$ is not fully reconciled"
            reconcile_b = move_line.reconcile_id.id
        elif float_compare(move_line.amount_currency, -55.56, precision_digits=2) == 0:
            assert move_line.reconcile_id.id, "The invoice of 100$ is not fully reconciled"
            reconcile_a = move_line.reconcile_id.id
    for move_line in move_line_obj.browse(cr, uid, move_lines):
        if float_compare(move_line.amount_currency, -55.56, precision_digits=2) == 0:
            assert float_compare(move_line.credit, 52.78, precision_digits=2) == 0, "Debtor account has wrong entry."
        elif float_compare(move_line.amount_currency, -22.22, precision_digits=2) == 0:
            assert float_compare(move_line.credit, 21.11, precision_digits=2) == 0, "Debtor account has wrong entry."
        elif float_compare(move_line.credit, 11.11, precision_digits=2) == 0 and move_line.account_id.reconcile:
            assert float_compare(move_line.amount_currency, 0.00, precision_digits=2) == 0 and move_line.reconcile_id.id == reconcile_b, "Incorrect Currency Difference."
        elif float_compare(move_line.credit, 32.78, precision_digits=2) == 0 and move_line.account_id.reconcile:
            assert float_compare(move_line.amount_currency, 0.00, precision_digits=2) == 0 and move_line.reconcile_id.id == reconcile_a, "Incorrect Currency Difference."
        elif float_compare(move_line.amount_currency, 2.22, precision_digits=2) == 0:
            assert float_compare(move_line.credit, 2.11, precision_digits=2) == 0, "Writeoff amount is wrong."
-
  I check the residual amount of invoice 1, should be 0 in residual currency and 0 in amount_residual and paid
-
  !python {model: account.invoice}: |
    from openerp.tools import float_compare
    invoice_id = self.browse(cr, uid, ref("account_first_invoice_jan_michal"))
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('invoice', '=', invoice_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    assert (float_compare(move_line.amount_residual_currency, 0.0, precision_digits=2) == 0 and float_compare(move_line.amount_residual, 0.0, precision_digits=2) == 0 and invoice_id.state == 'paid') , "Residual amount is not correct for first Invoice"
-
  I check the residual amount of invoice 2, should be 0 in residual currency and 0 in amount_residual and paid
-
   !python {model: account.invoice}: |
    from openerp.tools import float_compare
    invoice_id = self.browse(cr, uid, ref("account_second_invoice_feb_michal"))
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('invoice', '=', invoice_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    assert (float_compare(move_line.amount_residual_currency, 0.0, precision_digits=2) == 0 and float_compare(move_line.amount_residual, 0.0, precision_digits=2) == 0 and invoice_id.state == 'paid') , "Residual amount is not correct for second Invoice"
