-
  In order to check the Account_voucher module with multi-currency in OpenERP, 
  I create 2 Invoices in EUR and make 2 Payments in EUR based on the currency rating on that particular date
-
  I set the income and expense currency accounts on the main company
-
  !python {model: res.company}: |
    from datetime import datetime
    vals = {
      'income_currency_exchange_account_id': ref('account.o_expense'),
      'expense_currency_exchange_account_id': ref('account.o_expense')}
    self.write(cr, uid, ref('base.main_company'), vals)
-
  I create currency EUR in OpenERP for January of 0.800000 Rate
-
  !python {model: res.currency.rate}: |
    from datetime import datetime
    curr_id = self.pool.get('res.currency').search(cr, uid, [('name', '=', 'EUR')])[0]
    date = '%s-01-01' %(datetime.now().year)
    ids = self.search(cr, uid, [('currency_id','=',curr_id), ('name', '=', date)])
    self.write(cr, uid, ids, {'rate': 0.800000})
-
  I create currency EUR in OpenERP for February of 0.700000 Rate
-
  !record {model: res.currency.rate, id: feb_eur}:
    currency_id: base.EUR
    name: !eval "'%s-02-01' %(datetime.now().year)"
    rate: 0.700000

-
  I create currency EUR in OpenERP for March of 0.600000 Rate
-
  !record {model: res.currency.rate, id: mar_eur}:
    currency_id: base.EUR
    name: !eval "'%s-03-01' %(datetime.now().year)"
    rate: 0.600000

-
  I create currency EUR in OpenERP for April of 0.500000 Rate
-
  !record {model: res.currency.rate, id: apr_eur}:
    currency_id: base.EUR
    name: !eval "'%s-04-01' %(datetime.now().year)"
    rate: 0.500000

-
  I create a cash account with currency EUR
-
  !record {model: account.account, id: account_cash_eur_id}:
    currency_id: base.EUR
    name: "cash account in EUR"
    code: "Xcash EUR"
    type: 'liquidity'
    user_type: "account.data_account_type_cash"

-
  I create a bank journal with EUR as currency
-
  !record {model: account.journal, id: bank_journal_EUR}:
    name: Bank Journal(EUR)
    code: BEUR
    type: bank
    analytic_journal_id: analytic.sit
    sequence_id: account.sequence_bank_journal
    default_debit_account_id: account_cash_eur_id
    default_credit_account_id: account_cash_eur_id
    currency: base.EUR
    company_id: base.main_company

-
  I create the first invoice on 1st January  for 200 EUR
-
  !record {model: account.invoice, id: account_invoice_jan}:
    account_id: account.a_recv
    company_id: base.main_company
    currency_id: base.EUR
    date_invoice: !eval "'%s-01-01' %(datetime.now().year)"
    period_id: account.period_1
    invoice_line:
      - account_id: account.a_sale
        name: '[PCSC234] PC Assemble SC234'
        price_unit: 200.0
        quantity: 1.0
        product_id: product.product_product_3
        uos_id: product.product_uom_unit
    journal_id: account.sales_journal
    partner_id: base.res_partner_19
    reference_type: none
-
  I Validate invoice by clicking on Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_invoice_jan}
-
  I check that first invoice move is correct for debtor account (debit - credit == 250.0)
-
  !python {model: account.invoice}: |
    from openerp.tools import float_compare
    invoice_id = self.browse(cr, uid, ref("account_invoice_jan"))
    assert invoice_id.move_id, "Move not created for open invoice"
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    assert (float_compare(move_line.debit - move_line.credit, 250.0, precision_digits=2) == 0), "Invoice move is not correct for debtors account"
-
  I create the second invoice on 1st February for 100 EUR
-
  !record {model: account.invoice, id: account_invoice_feb}:
    account_id: account.a_recv
    company_id: base.main_company
    currency_id: base.EUR
    date_invoice: !eval "'%s-02-01' %(datetime.now().year)"
    period_id: account.period_2
    invoice_line:
      - account_id: account.a_sale
        name: '[PCSC234] PC Assemble SC234'
        price_unit: 100.0
        quantity: 1.0
        product_id: product.product_product_3
        uos_id: product.product_uom_unit
    journal_id: account.sales_journal
    partner_id: base.res_partner_19
    reference_type: none
-
  I Validate invoice by clicking on Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_invoice_feb}
-
  I check that second invoice move is correct for debtor account (debit - credit == 142.86)
-
  !python {model: account.invoice}: |
    from openerp.tools import float_compare
    invoice_id = self.browse(cr, uid, ref("account_invoice_feb"))
    assert invoice_id.move_id, "Move not created for open invoice"
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    assert (float_compare(move_line.debit - move_line.credit, 142.86, precision_digits=2) == 0), "Invoice move is not correct for debtors account"

-
  I set the context that will be used for the encoding of all the vouchers of this file
-
  !context
    'type': 'receipt'
-
  On the first March, I create the first voucher of payment with values 240 EUR, journal EUR, 
-
  !record {model: account.voucher, id: account_voucher_1_case1, view: view_vendor_receipt_form}:
    account_id: account.cash
    amount: 240.0
    company_id: base.main_company
    journal_id: bank_journal_EUR
    name: 'First payment: Case 1 EUR/EUR'
    partner_id: base.res_partner_19
    period_id: account.period_3
    date: !eval time.strftime("%Y-03-01")
    payment_option: 'with_writeoff'
    writeoff_acc_id: account.a_expense
    comment: 'Write Off'

-
  I fill amounts 180 for the invoice of 200$ and 70 for the invoice of 100$>
-
  !python {model: account.voucher}: |
    from openerp.tools import float_compare
    vals = {}
    voucher_id = self.browse(cr, uid, ref('account_voucher_1_case1'))
    data = []
    for item in voucher_id.line_cr_ids:
        if float_compare(item.amount_unreconciled, 200.00, precision_digits=2) == 0:
            data += [(item.id, 180.0)]
        else:
            data += [(item.id, 70.0)]
    for line_id, amount in data:
        self.pool.get('account.voucher.line').write(cr, uid, [line_id], {'amount': amount})
    assert (voucher_id.state=='draft'), "Voucher is not in draft state"
-
  I check that writeoff amount computed is -10.0
-
  !python {model: account.voucher}: |
    from openerp.tools import float_compare
    voucher = self.search(cr, uid, [('name', '=', 'First payment: Case 1 EUR/EUR'), ('partner_id', '=', ref('base.res_partner_19'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    assert (float_compare(voucher_id.writeoff_amount, -10.0, precision_digits=2) == 0), "Writeoff amount is not -10.0"
-
  I confirm the voucher
-
  !python {model: account.voucher}: |
    voucher = self.search(cr, uid, [('name', '=', 'First payment: Case 1 EUR/EUR'), ('partner_id', '=', ref('base.res_partner_19'))])
    self.signal_workflow(cr, uid, voucher, 'proforma_voucher')
-
  I check that the move of my first voucher is valid
-
  !python {model: account.voucher}: |
    voucher = self.search(cr, uid, [('name', '=', 'First payment: Case 1 EUR/EUR'), ('partner_id', '=', ref('base.res_partner_19'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', voucher_id.move_id.id)])
    for move_line in move_line_obj.browse(cr, uid, move_lines):
        assert move_line.state == 'valid', "Voucher move is not valid"
-
  I check that my debtor account is correct
-
  I check that the debtor account has 2 new lines with -180 and -70 as amount_currency columns and that their credit columns are respectively 300 and 116.67
-
  I check that my write-off is correct. 16.67 debit and 10 amount_currency
-
  !python {model: account.voucher}: |
    from openerp.tools import float_compare
    voucher = self.search(cr, uid, [('name', '=', 'First payment: Case 1 EUR/EUR'), ('partner_id', '=', ref('base.res_partner_19'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', voucher_id.move_id.id)])
    for move_line in move_line_obj.browse(cr, uid, move_lines):
        if float_compare(move_line.amount_currency, -180.00, precision_digits=2) == 0:
            assert float_compare(move_line.credit, 300.0, precision_digits=2) == 0, "Debtor account has wrong entry."
        elif float_compare(move_line.amount_currency, -70.00, precision_digits=2) == 0:
            assert float_compare(move_line.credit, 116.67, precision_digits=2) == 0, "Debtor account has wrong entry."
        elif float_compare(move_line.amount_currency, 10.00, precision_digits=2) == 0:
            assert float_compare(move_line.debit, 16.67, precision_digits=2) == 0, "Writeoff amount is wrong."
        elif float_compare(move_line.amount_currency, 240.00, precision_digits=2) == 0:
            assert float_compare(move_line.debit, 400.00, precision_digits=2) == 0, "Bank entry is wrong."
        else:
            assert False, "Unrecognized journal entry"
-
  I check the residual amount of Invoice1, should be 20 in amount_currency
-
  !python {model: account.invoice}: |
    from openerp.tools import float_compare
    invoice_id = self.browse(cr, uid, ref("account_invoice_jan"))
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('invoice', '=', invoice_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    assert (float_compare(move_line.amount_residual_currency, 20.0, precision_digits=2) == 0) , "Residual amount is not correct for first Invoice"
-
  I check the residual amuont of Invoice2, should be 30 in residual currency and 24 in amount_residual
-
  !python {model: account.invoice}: |
    from openerp.tools import float_compare
    invoice_id = self.browse(cr, uid, ref("account_invoice_feb"))
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('invoice', '=', invoice_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    assert (float_compare(move_line.amount_residual_currency, 30.0, precision_digits=2) == 0) , "Residual amount is not correct for first Invoice"
-
  On the first April, I create the second voucher of payment with values 45 EUR, journal EUR, 
-
  !record {model: account.voucher, id: account_voucher_2_case1, view: view_vendor_receipt_form}:
    account_id: account.cash
    amount: 45.0
    company_id: base.main_company
    journal_id: bank_journal_EUR
    name: 'Second payment: Case 1'
    partner_id: base.res_partner_19
    period_id: account.period_3
    date: !eval time.strftime("%Y-04-01")
    payment_option: 'with_writeoff'
    writeoff_acc_id: account.a_expense
    comment: 'Write Off'
-
  I fill amounts 20 for the invoice of 200$ and 30 for the invoice of 100$
-
  !python {model: account.voucher}: |
    from openerp.tools import float_compare
    vals = {}
    voucher_id = self.browse(cr, uid, ref('account_voucher_2_case1'))
    data = []
    for item in voucher_id.line_cr_ids:
        if float_compare(item.amount_unreconciled, 20.00, precision_digits=2) == 0:
            data += [(item.id, 20.0)]
        else:
            data += [(item.id, 30.0)]
    for line_id, amount in data:
        self.pool.get('account.voucher.line').write(cr, uid, [line_id], {'amount': amount})
    assert (voucher_id.state=='draft'), "Voucher is not in draft state"
-
  I check that writeoff amount computed is -5.0
-
  !python {model: account.voucher}: |
    from openerp.tools import float_compare
    voucher = self.search(cr, uid, [('name', '=', 'Second payment: Case 1'), ('partner_id', '=', ref('base.res_partner_19'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    assert (float_compare(voucher_id.writeoff_amount, -5.0, precision_digits=2) == 0), "Writeoff amount is not -5.0"
-
  I confirm the voucher
-
  !python {model: account.voucher}: |
    voucher = self.search(cr, uid, [('name', '=', 'Second payment: Case 1'), ('partner_id', '=', ref('base.res_partner_19'))])
    self.signal_workflow(cr, uid, voucher, 'proforma_voucher')
-
  I check that the move of my second voucher is valid
-
  !python {model: account.voucher}: |
    voucher = self.search(cr, uid, [('name', '=', 'Second payment: Case 1'), ('partner_id', '=', ref('base.res_partner_19'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', voucher_id.move_id.id)])
    for move_line in move_line_obj.browse(cr, uid, move_lines):
        assert move_line.state == 'valid', "Voucher move is not valid"
-
  I check that my debtor account is correct
-
  I check that the debtor account has 2 new lines with -20 and -30 as amount_currency columns and their credit columns are respectively 40 and 60
-
  I check that my currency rate difference is correct. 8.5 in credit with no amount_currency
-
  I  check that the total reconcilation created entries as expected
-
  I check that my writeoff is correct. 10.0 debit and 5 amount_currency
-
  !python {model: account.voucher}: |
    from openerp.tools import float_compare
    voucher = self.search(cr, uid, [('name', '=', 'Second payment: Case 1'), ('partner_id', '=', ref('base.res_partner_19'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', voucher_id.move_id.id)])
    reconcile_a = reconcile_b = False
    for move_line in move_line_obj.browse(cr, uid, move_lines):
        if float_compare(move_line.amount_currency, -20.00, precision_digits=2) == 0:
            assert move_line.reconcile_id.id, "The invoice of 200$ is not fully reconciled"
            reconcile_b = move_line.reconcile_id.id
        elif float_compare(move_line.amount_currency, -30.00, precision_digits=2) == 0:
            assert move_line.reconcile_id.id, "The invoice of 100$ is not fully reconciled"
            reconcile_a = move_line.reconcile_id.id
    for move_line in move_line_obj.browse(cr, uid, move_lines):
        if float_compare(move_line.amount_currency, -20.00, precision_digits=2) == 0:
            assert float_compare(move_line.credit, 40.00, precision_digits=2) == 0, "Debtor account has wrong entry."
        elif float_compare(move_line.amount_currency, -30.00, precision_digits=2) == 0:
            assert float_compare(move_line.credit, 60.0, precision_digits=2) == 0, "Debtor account has wrong entry."
        elif float_compare(move_line.amount_currency, 5.00, precision_digits=2) == 0:
            assert float_compare(move_line.debit, 10.0, precision_digits=2) == 0, "Writeoff amount is wrong."
        elif float_compare(move_line.debit, 33.81, precision_digits=2) == 0 and move_line.account_id.reconcile:
            assert float_compare(move_line.amount_currency, 0.0, precision_digits=2) == 0 and move_line.reconcile_id.id == reconcile_a, "Exchange difference entry for the invoice of 100$ is wrong"
        elif float_compare(move_line.credit, 33.81, precision_digits=2) == 0:
            assert float_compare(move_line.amount_currency, 0.0, precision_digits=2) == 0
        elif float_compare(move_line.debit, 90.0, precision_digits=2) == 0 and move_line.account_id.reconcile:
            assert float_compare(move_line.amount_currency, 0.0, precision_digits=2) == 0 and move_line.reconcile_id.id == reconcile_b, "Exchange difference entry for the invoice of 200$ is wrong"
        elif float_compare(move_line.credit, 90.0, precision_digits=2) == 0:
            assert float_compare(move_line.amount_currency, 0.0, precision_digits=2) == 0
        elif float_compare(move_line.amount_currency, 45.00, precision_digits=2) == 0:
            assert float_compare(move_line.debit, 90.0, precision_digits=2) == 0, "Bank entry is wrong."
        else:
            assert False, "Unrecognized journal entry"
-
  I check the residual amount of Invoice1, should be 0 in residual currency and 0 in amount_residual and paid
-
  !python {model: account.invoice}: |
    from openerp.tools import float_compare
    invoice_id = self.browse(cr, uid, ref("account_invoice_jan"))
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('invoice', '=', invoice_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    assert (float_compare(move_line.amount_residual_currency, 0.0, precision_digits=2) == 0 and float_compare(move_line.amount_residual, 0.0, precision_digits=2) == 0 and invoice_id.state == 'paid') , "Residual amount is not correct for first Invoice"
-
  I check the residual amuont of Invoice2, should be 0 in residual currency and 0 in amount_residual and paid
-
  !python {model: account.invoice}: |
    from openerp.tools import float_compare
    invoice_id = self.browse(cr, uid, ref("account_invoice_feb"))
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('invoice', '=', invoice_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    assert (float_compare(move_line.amount_residual_currency, 0.0, precision_digits=2) == 0 and float_compare(move_line.amount_residual, 0.0, precision_digits=2) == 0 and invoice_id.state == 'paid') , "Residual amount is not correct for second Invoice"
