-
  In order to test the process of revenue recognition from customer invoice, I create customer invoice.
-
  !record {model: account.invoice, id: account_invoice_insurance}:
    partner_id: base.res_partner_12
    invoice_line:
      - price_unit: 450.0
        quantity: 1.0
        name: 'Insurance claim'
        recongnition_date: !eval "'%s-01-01' %(datetime.now().year)"
        asset_category_id: account_asset_category_sale1
    
-
  I create revenue recognition by validating invoice.
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_invoice_insurance}
-
  Test the process of revenue recognition.
-
  !python {model: account.asset.asset}: |
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    line_obj = self.pool.get('account.asset.depreciation.line')
    invoice = self.pool.get('account.invoice').browse(cr, uid, ref("account_invoice_insurance"))
    recognition_ids = self.search(cr, uid, [('code', '=', invoice.number)])
    assert recognition_ids, 'Revenue recognition has been not created from invoice.'
    
    #I confirm revenue recognition.
    self.validate(cr, uid, recognition_ids)
    recognition = self.browse(cr, uid, recognition_ids[0])
    first_invoice_line = invoice.invoice_line[0]
    assert recognition.state == 'open', 'Recognition should be in Open state'
    assert recognition.value == first_invoice_line.price_subtotal, 'Recognition value is not same as invoice line.'
    assert recognition.date == first_invoice_line.recongnition_date, 'Recognition date is not same as invoice line.'
    
    #I post installment lines.
    line_ids = [rec.id for rec in recognition.depreciation_line_ids]
    line_obj.create_move(cr, uid, line_ids)
    
    #I check that move line is created from posted installment lines.
    assert len(recognition.depreciation_line_ids) == len(recognition.account_move_line_ids), 'Move lines not created correctly.'
    
    #I check data in move line and installment line.
    first_installment_line = recognition.depreciation_line_ids[0]
    first_move_line = recognition.account_move_line_ids[0]
    assert first_installment_line.amount == first_move_line.credit, 'First installment line amount is incorrect.'
    assert recognition.category_id.account_income_recognition_id == first_move_line.account_id, 'Move line account and recognition category account is not same.'
    remaining_value = recognition.value - first_installment_line.amount
    assert first_installment_line.remaining_value == recognition.value - first_installment_line.amount, 'Remaining value is incorrect.'
    
    #I check next installment date.
    last_installment_date = datetime.strptime(first_installment_line.depreciation_date, '%Y-%m-%d')
    installment_date = (last_installment_date+relativedelta(months=+recognition.method_period))
    assert recognition.depreciation_line_ids[1].depreciation_date == str(installment_date.date()), 'Installment date is incorrect.'