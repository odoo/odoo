-
    Creating demo data that require looking for accounts
-
    !python {model: ir.model.data} : |
        expenses_journal_id = self.pool.get('account.journal').search(cr, uid, [('type', '=', 'purchase')])
        expense_account_id = self.pool.get('account.account').search(cr, uid, [('user_type', '=', ref('account.data_account_type_expenses'))])
        xfa_account_id = self.pool.get('account.account').search(cr, uid, [('user_type', '=', ref('account.data_account_type_fixed_assets'))])
        from datetime import datetime, timedelta
        import time
        if xfa_account_id and expense_account_id and expenses_journal_id:
            vals = {
                'journal_id': expenses_journal_id[0],
                'name': 'Hardware - 3 Years',
                'method_number': 3,
                'account_asset_id': xfa_account_id[0],
                'account_depreciation_id': xfa_account_id[0],
                'account_expense_depreciation_id': expense_account_id[0],
            }
            self._update(cr, uid, 'account.asset.category', 'account_asset', vals, 'account_asset_category_fixedassets0')
            vals = {
                'journal_id': expenses_journal_id[0],
                'name': 'Cars - 5 Years',
                'method_number': 5,
                'account_asset_id': xfa_account_id[0],
                'account_depreciation_id': xfa_account_id[0],
                'account_expense_depreciation_id': expense_account_id[0],
            }
            self._update(cr, uid, 'account.asset.category', 'account_asset', vals, 'account_asset_category_fixedassets1')
            vals = {
                'salvage_value': 2000.0,
                'state': 'open',
                'method_period': 12,
                'method_number': 5,
                'name': "CEO's car",
                'purchase_value': 12000.0,
                'category_id': ref('account_asset_category_fixedassets0'),
            }
            self._update(cr, uid, 'account.asset.asset', 'account_asset', vals, 'account_asset_asset_vehicles0')
            vals = {
                'method_end': (datetime.now().replace(month=8, day=11) + timedelta(days=3*365)).strftime('%Y-%m-%d'),
                'salvage_value': 0.0,
                'method_time': 'end',
                'name': 'V6 Engine and 10 inches tires',
                'purchase_value': 2800.0,
                'category_id': ref('account_asset_category_fixedassets0'),
            }
            self._update(cr, uid, 'account.asset.asset', 'account_asset', vals, 'account_asset_asset_cab0')
            vals = {
                'prorata': 1,
                'salvage_value': 100000.0,
                'state': 'open',
                'method_period': 12,
                'method_number': 20,
                'purchase_date': time.strftime('%Y-01-01'),
                'name': 'Office',
                'purchase_value': 500000.0,
                'category_id': ref('account_asset_category_fixedassets0'),
            }
            self._update(cr, uid, 'account.asset.asset', 'account_asset', vals, 'account_asset_asset_office0')
        sale_account_id = self.pool.get('account.account').search(cr, uid, [('user_type', '=', ref('account.data_account_type_revenue')), ('tag_ids', 'in', [ref('account.account_tag_operating')])])
        if not sale_account_id:
            sale_account_id = self.pool.get('account.account').search(cr, uid, [('user_type', '=', ref('account.data_account_type_revenue'))])
        if xfa_account_id and sale_account_id:
            vals = {
                'journal_id': expenses_journal_id[0],
                'name': 'Revenue Recognition Maintenance Contract - 3 Years',
                'method_number': 6,
                'account_asset_id': xfa_account_id[0],
                'account_depreciation_id': xfa_account_id[0],
                'account_expense_depreciation_id': sale_account_id[0],
            }
            self._update(cr, uid, 'account.asset.category', 'account_asset', vals, 'account_asset_category_sale')
