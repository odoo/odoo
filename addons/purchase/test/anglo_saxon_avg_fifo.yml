-
  I first set the company to use anglo saxon accounting.
-
  !python {model: res.company}: |
    self.pool.get('res.company').write(cr, uid, ref("base.main_company"), {'anglo_saxon_accounting': True,})
-
  In order to test anglo_saxon Configure Different Accounts.
-
  !record {model: account.account, id: account_anglo_stock_valuation_fifo}:
    code: X3000f
    name: Stock Valuation Account- (test)
    user_type_id: account.data_account_type_current_assets
-
  Configure Stock Interim account (Received).
-
  !record {model: account.account, id: account_anglo_stock_input_fifo}:
    code: X2800f
    name: Stock Interim account (Received)
    user_type_id: account.data_account_type_expenses
-
  Configure Stock Interim account (Delivered).
-
  !record {model: account.account, id: account_anglo_stock_output_fifo}:
    code: X2801f
    name: Stock Interim account (Delivered)
    user_type_id: account.data_account_type_revenue
-
  Configure Price difference creditor Account.
-
  !record {model: account.account, id: account_anglo_price_difference_fifo}:
    code: X7095f
    name: Price difference creditor Account
    user_type_id: account.data_account_type_expenses
-
  Configure Cash Bank Account.
-
  !record {model: account.account, id: account_anglo_cash_fifo}:
    code: X5000f
    name: Cash/Bank Account
    user_type_id: account.data_account_type_liquidity
    reconcile: True
-
  Configure Creditor Account Payable.
-
  !record {model: account.account, id: account_anglo_payable_fifo}:
    code: X440001f
    name: Creditor Account Payable
    user_type_id: account.data_account_type_payable
    reconcile: True
-
  Configure Debtor Account Receivable.
-
  !record {model: account.account, id: account_anglo_receivable_fifo}:
    code: X400001f
    name: Debtor Account Receivable
    user_type_id: account.data_account_type_receivable
    reconcile: True
-
  Configure Cost of Good sale Account.
-
  !record {model: account.account, id: account_anglo_cogs_fifo}:
    code: X7000f
    name: Cost of goods sale account
    user_type_id: account.data_account_type_expenses
-
  Configure Income Account.
-
  !record {model: account.account, id: account_anglo_income_fifo}:
    code: X8000f
    name: Income Account
    user_type_id: account.data_account_type_revenue
-
  I configure the account receivable of supplier
-
  !record {model: res.partner, id: base.res_partner_3}:
    property_account_payable_id: account_anglo_payable_fifo
    property_account_receivable_id: account_anglo_receivable_fifo
-
  I configure the account receivable of Customer.
-
  !record {model: res.partner, id: base.res_partner_2}:
    property_account_payable_id: account_anglo_payable_fifo
    property_account_receivable_id: account_anglo_receivable_fifo
-
  I configure the product category with stock valuation account.
-
  !record {model: product.category, id: product.product_category_5}:
    property_stock_valuation_account_id: account_anglo_stock_valuation_fifo
-
  I create a product with required accounts, and cost method average (but same applies for fifo)
-
  !record {model: product.product, id: product_fifo_anglo_saxon}:
    name: 'FIFO product for anglo saxon tests'
    lst_price: 20.00
    standard_price: 0
    categ_id: product.product_category_5
    valuation: 'real_time'
    property_account_income_id: account_anglo_income_fifo
    property_account_expense_id: account_anglo_cogs_fifo
    property_account_creditor_price_difference: account_anglo_price_difference_fifo
    property_stock_account_input: account_anglo_stock_input_fifo
    property_stock_account_output: account_anglo_stock_output_fifo
    cost_method: 'average'
-
  I create a draft Purchase Order.
-
  !record {model: purchase.order, id: purchase_order_001_fifo}:
    partner_id: base.res_partner_3
    location_id: stock.stock_location_stock
    order_line:
      - product_id: product_fifo_anglo_saxon
        product_qty: 1
        price_unit: 9
        date_planned: !eval "'%s' % (time.strftime('%Y-%m-%d'))"
        taxes_id: []
-
  I confirm the purchase order.
-
  !workflow {model: purchase.order, ref: purchase_order_001_fifo, action: purchase_confirm}
-
  Receipt is ready for process so now we do it.
-
  !python {model: stock.picking}: |
    picking_id = self.pool.get('purchase.order').browse(cr, uid, ref("purchase_order_001_fifo"), context=context).picking_ids[0]
    picking_id.do_transfer()
-
  I check the Stock Interim account (Received) is credit successfully.
-
  !python {model: account.account}: |
    from openerp.tools import float_compare
    # Due to credit field is removed
    # credit = self.browse(cr, uid, ref('account_anglo_stock_input_fifo')).credit
    # assert float_compare(credit, 9, precision_digits=2) == 0, "Stock Interim account (Received) is not credited successfully."
-
  I check the Stock valuation account is debit sucessfully.
-
  !python {model: account.account, id}: |
    from openerp.tools import float_compare
    # Due to debit field is removed
    # debit = self.browse(cr, uid, ref('account_anglo_stock_valuation_fifo')).debit
    # assert float_compare(debit, 9, precision_digits=2) == 0, "Stock valuation account is not debited successfully."
-
  I Validate Invoice of Purchase Order after having changed the price to 10.
-
  !python {model: purchase.order}: |
    invoice_ids = [x.id for x in self.browse(cr, uid, ref("purchase_order_001_fifo")).invoice_ids]
    line_ids = self.pool.get('account.invoice.line').search(cr, uid, [('invoice_id', 'in', invoice_ids)])
    self.pool.get('account.invoice.line').write(cr, uid, line_ids, {'price_unit': 10})
    self.pool.get('account.invoice').signal_workflow(cr, uid, invoice_ids, 'invoice_open')
-
  I check the Stock Interim account (Received) is debited sucessfully when Invoice validated.
-
  !python {model: account.account}: |
    from openerp.tools import float_compare
    # Due to debit field is removed
    # debit = self.browse(cr, uid, ref('account_anglo_stock_input_fifo')).debit
    # assert float_compare(debit, 9, precision_digits=2) == 0, "Stock Interim account (Received) is not debited successfully."
-
  I check the Price difference creditor Account is debited sucessfully when Invoice validated.
-
  !python {model: account.account}: |
    from openerp.tools import float_compare
    # Due to debit field is removed
    # debit = self.browse(cr, uid, ref('account_anglo_price_difference_fifo')).debit
    # assert float_compare(debit, 1, precision_digits=2) == 0, "Price difference creditor Account is not debited successfully."
-
  I check Payable(creditor) Account is Credited sucessfully when Invoice validated.
-
  !python {model: account.account}: |
    from openerp.tools import float_compare
    # Due to credit field is removed
    # credit = self.browse(cr, uid, ref('account_anglo_payable_fifo')).credit
    # assert float_compare(credit, 10, precision_digits=2) == 0, "Payable(creditor) Account is not Credited successfully."
-
  I pay the invoice.
-
  !python {model: purchase.order}: |
    invoice_ids = self.browse(cr, uid, ref("purchase_order_001_fifo")).invoice_ids
    order = self.browse(cr, uid, ref("purchase_order_001_fifo"))
    journal_ids = self.pool.get('account.journal').search(cr, uid, [('type', '=', 'cash'), ('company_id', '=', order.company_id.id)], limit=1)
    import  time
    for invoice in invoice_ids:
        self.pool.get('account.invoice').pay_and_reconcile(cr, uid, [invoice.id], journal_ids[0])
-
  I check Payable(Creditors) Account is Debited sucessfully after invoice paid.
-
  !python {model: account.account}: |
    from openerp.tools import float_compare
    # Due to debit field is removed
    # debit = self.browse(cr, uid, ref('account_anglo_payable_fifo')).debit
    # assert float_compare(debit, 10, precision_digits=2) == 0, "Payable(Creditors) Account is not Debited successfully."
-
  I check Bank/Cash account is credited sucessfully after invoice paid.
-
  !python {model: account.account}: |
    from openerp.tools import float_compare
    # Due to debit field is removed
    # credit = self.browse(cr, uid, ref('account_anglo_cash_fifo')).credit
    # assert float_compare(credit, 10, precision_digits=2) == 0, "Bank/Cash account is not credited successfully."
-
  I create an Outgoing Picking order
-
  !record {model: stock.picking, id: stock_picking_out001_fifo}:
    partner_id: base.res_partner_2
    move_lines:
      - company_id: base.main_company
        location_id: stock.stock_location_stock
        product_id: product_fifo_anglo_saxon
        product_uom_qty: 1.0
        location_dest_id: stock.stock_location_customers
    move_type: direct
    picking_type_id: stock.picking_type_out
-
  I need to check the availability of the product, So I make my picking order for processing later.
-
  !python {model: stock.picking}: |
    self.action_confirm(cr, uid, [ref('stock_picking_out001_fifo')], context=context)
-
  I check the product availability, Product is available in the stock and ready to be sent.
-
  !python {model: stock.picking}: |
    picking = self.browse(cr, uid, ref("stock_picking_out001_fifo"))
    assert picking.state == "confirmed", "Picking should be confirmed."
    for move_line in picking.move_lines:
      assert move_line.state == "confirmed", "Move should be confirmed."
-
  I process the delivery.
-
  !python {model: stock.picking}: |
    picking = self.pool.get('stock.picking').browse(cr, uid, ref("stock_picking_out001_fifo"), context=context)
    picking.do_transfer()
-
  I check Stock Interim account (Delivery) is debited successfully.
-
  !python {model: account.account}: |
    from openerp.tools import float_compare
    # Due to debit field is removed
    # debit = self.browse(cr, uid, ref('account_anglo_stock_output_fifo')).debit
    # assert float_compare(debit, 9, precision_digits=2) == 0, "Stock Interim account (Delivery) is not debited successfully."
-
  I check the Stock valuation account is credited sucessfully.
-
  !python {model: account.account}: |
    from openerp.tools import float_compare
    # Due to credit field is removed
    # credit = self.browse(cr, uid, ref('account_anglo_stock_valuation_fifo')).credit
    # assert float_compare(credit, 9, precision_digits=2) == 0, "Stock valuation account is not credited successfully."
