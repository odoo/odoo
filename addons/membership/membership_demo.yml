-
  create invoice and state is 'open' and pay some invoice
-
  !python {model: res.partner}: |

    vals = {'free_member': False}
    self.pool.get('ir.model.data')._update(cr, uid, 'res.partner', 'base', vals, 'res_partner_18')
    self.pool.get('ir.model.data')._update(cr, uid, 'res.partner', 'base', vals, 'res_partner_4')
    self.pool.get('ir.model.data')._update(cr, uid, 'res.partner', 'base', vals, 'res_partner_12')
    self.pool.get('ir.model.data')._update(cr, uid, 'res.partner', 'base', vals, 'res_partner_1')

    if self.pool.get('account.invoice')._default_currency(cr, uid):
        import time
        invoice_ids = self.create_membership_invoice(cr, uid, [ref("base.res_partner_1"),ref("base.res_partner_4"),ref("base.res_partner_10"),ref("base.res_partner_2"),ref("base.res_partner_12"),ref("base.res_partner_3"),ref("base.res_partner_4"),ref("base.res_partner_1"),ref("base.res_partner_1"),ref("base.res_partner_10")], product_id=ref("membership_1"), datas={"amount":80.00})
        invoice_pool = self.pool.get('account.invoice')
        invoice_pool.signal_workflow(cr, uid, invoice_ids, 'invoice_open')

        bank_journal_id = self.pool.get('account.journal').search(cr, uid, [('type', '=', 'bank')])
        if bank_journal_id:
            for id in invoice_ids[-4:]:
                pay = invoice_pool.pay_and_reconcile(cr, uid, [id], bank_journal_id[0], 9050.0)

        self.create_membership_invoice(cr, uid, ref('base.res_partner_2'), ref('membership_0'), {'amount':180})
        self.create_membership_invoice(cr, uid, ref('base.res_partner_10'), ref('membership_0'), {'amount':180})
        self.create_membership_invoice(cr, uid, ref('base.res_partner_12'), ref('membership_0'), {'amount':180})
        self.create_membership_invoice(cr, uid, ref('base.res_partner_2'), ref('membership_0'), {'amount':180})

        self.create_membership_invoice(cr, uid, ref('base.res_partner_18'), ref('membership_1'), {'amount':180})
        self.create_membership_invoice(cr, uid, ref('base.res_partner_4'), ref('membership_1'), {'amount':180})
        self.create_membership_invoice(cr, uid, ref('base.res_partner_1'), ref('membership_1'), {'amount':180})
        self.create_membership_invoice(cr, uid, ref('base.res_partner_12'), ref('membership_1'), {'amount':180})

        self.create_membership_invoice(cr, uid, ref('base.res_partner_12'), ref('membership_2'), {'amount':180})
        self.create_membership_invoice(cr, uid, ref('base.res_partner_3'), ref('membership_2'), {'amount':180})
        self.create_membership_invoice(cr, uid, ref('base.res_partner_3'), ref('membership_2'), {'amount':180})
        self.create_membership_invoice(cr, uid, ref('base.res_partner_3'), ref('membership_2'), {'amount':180})

    vals = {'free_member': True}
    self.pool.get('ir.model.data')._update(cr, uid, 'res.partner', 'base', vals, 'res_partner_18')
    self.pool.get('ir.model.data')._update(cr, uid, 'res.partner', 'base', vals, 'res_partner_4')
    self.pool.get('ir.model.data')._update(cr, uid, 'res.partner', 'base', vals, 'res_partner_12')
    self.pool.get('ir.model.data')._update(cr, uid, 'res.partner', 'base', vals, 'res_partner_1')

    vals = {'associate_member': ref('base.res_partner_2')}
    self.pool.get('ir.model.data')._update(cr, uid, 'res.partner', 'base', vals, 'res_partner_12')
    self.pool.get('ir.model.data')._update(cr, uid, 'res.partner', 'base', vals, 'res_partner_12')
    self.pool.get('ir.model.data')._update(cr, uid, 'res.partner', 'base', vals, 'res_partner_3')
    self.pool.get('ir.model.data')._update(cr, uid, 'res.partner', 'base', vals, 'res_partner_4')
    self.pool.get('ir.model.data')._update(cr, uid, 'res.partner', 'base', vals, 'res_partner_12')
