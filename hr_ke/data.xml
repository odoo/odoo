<openerp>
    <data noupdate="1">
    <!--<data> -->
<!-- These are the original salary rule categories which we are modify to suite our purpose -->
        <record id="category1" model="hr.salary.rule.category">
            <field name="name">Basic pay</field>
            <field name="code">BASIC_PAY</field>
        </record>

        <record id="category2" model="hr.salary.rule.category">
            <field name="name">Cash Allowance</field>
            <field name="code">CASH_ALW</field>
        </record>

        <record id="category3" model="hr.salary.rule.category">
            <field name="name">Gross Pay</field>
            <field name="code">GROSS_PAY</field>
        </record>

        <record id="category4" model="hr.salary.rule.category">
            <field name="name">Deduction</field>
            <field name="code">DED</field>
        </record>

        <record id="category5" model="hr.salary.rule.category">
            <field name="name">Net Pay</field>
            <field name="code">NET_PAY</field>
        </record>

        <record id="category6" model="hr.salary.rule.category">
            <field name="name">Company Contribution</field>
            <field name="code">COMP</field>
        </record>

<!-- salary rules  which we are adding to suite our purpose -->
        <record id="ke_rule1" model="hr.salary.rule">
            <field name="name">Basic Pay</field>
            <field name="sequence" eval="1"/>
            <field name="code">BASIC_PAY</field>
            <field name="category_id" ref="category1"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">result = contract.wage</field>
        </record>

        <record id="ke_rule2" model="hr.salary.rule">
            <field name="name">Gross Pay</field>
            <field name="sequence" eval="10"/>
            <field name="code">GROSS_PAY</field>
            <field name="category_id" ref="category3"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">result = categories.BASIC_PAY + categories.CASH_ALW</field>
        </record>

        <record id="ke_rule3" model="hr.salary.rule">
            <field name="name">Net Pay</field>
            <field name="sequence" eval="200"/>
            <field name="code">NET_PAY</field>
            <field name="category_id" ref="category5"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">result = categories.GROSS_PAY - categories.NET_TAX - categories.POST_TAX_DED - categories.PRE_TAX_DED</field>
            <field name="register_id" ref="hr_payroll.contrib_register_employees"/>
	</record>


<!--Salary Rule categories -->
	<record id="category7" model="hr.salary.rule.category">
	   <field name="name">Benefits (non-cash)</field>
	   <field name="code">BENEFITS</field>
	</record>
	<record id="category8" model="hr.salary.rule.category">
	   <field name="name">Other Earnings</field>
	   <field name="code">CASH_ALW</field>
	</record>
	<record id="category9" model="hr.salary.rule.category">
	   <field name="name">Tax Relief</field>
	   <field name="code">TAX_RELIEF</field>
	</record>
	<record id="category10" model="hr.salary.rule.category">
	   <field name="name">Pre-Tax Deductions</field>
	   <field name="code">PRE_TAX_DED</field>
	</record>
	<record id="category11" model="hr.salary.rule.category">
	   <field name="name">Post-Tax Deductions</field>
	   <field name="code">POST_TAX_DED</field>
	</record>
	<record id="category12" model="hr.salary.rule.category">
	   <field name="name">Tax</field>
	   <field name="code">TAX</field>
	</record>
	<record id="category13" model="hr.salary.rule.category">
	   <field name="name">Net Taxable Income</field>
	   <field name="code">NET_TAXABLE</field>
	</record>
	<record id="category14" model="hr.salary.rule.category">
	   <field name="name">Gross Taxable Income</field>
	   <field name="code">GROSS_TAXABLE</field>
	</record>
	<record id="category15" model="hr.salary.rule.category">
	   <field name="name">Net Tax Payable</field>
	   <field name="code">NET_TAX</field>
	</record>

<!-- Tax Rule -->
	<record id="ke_rule16" model="hr.salary.rule">
	   <field name="name">Pay As You Earn</field>
	   <field name="category_id" ref="hr_ke.category12"/>
	   <field name="code">PAYE</field>
	   <field name="sequence">60</field>
	   <field name="active">True</field>
	   <field name="appears_on_payslip">True</field>
	   <field name="condition_select">none</field>
	   <field name="amount_select">code</field>
	   <field name="amount_python_compute">

first_margin=10164
first_rate = 0.10
second_margin =19740
second_rate = 0.15
third_margin = 29316
third_rate = 0.20
fourth_margin = 38892
fourth_rate = 0.25
fifth_rate = 0.30
round_up = lambda x: int(x + 1) if int(x) != x else int(x)
if categories.NET_TAXABLE &lt;= first_margin:
 tax= (first_rate * categories.NET_TAXABLE)
elif categories.NET_TAXABLE &lt;= second_margin and categories.NET_TAXABLE > first_margin :
 tax = ((first_rate * first_margin) + (second_rate * (categories.NET_TAXABLE- first_margin)))
elif categories.NET_TAXABLE &lt;= third_margin and categories.NET_TAXABLE > second_margin :
 tax = ((first_rate * first_margin) + (second_rate * (second_margin - first_margin)) + (third_rate * (categories.NET_TAXABLE - second_margin)))
elif categories.NET_TAXABLE &lt;= fourth_margin and categories.NET_TAXABLE > third_margin :
 tax = ((first_rate * first_margin) + (second_rate * (second_margin - first_margin)) + (third_rate * (third_margin - second_margin)) + (fourth_rate * (categories.NET_TAXABLE - third_margin)))
elif categories.NET_TAXABLE > fourth_margin :
 tax = ((first_rate * first_margin) + (second_rate * (second_margin - first_margin)) + (third_rate * (third_margin - second_margin)) + (fourth_rate * (fourth_margin - third_margin)) + (fifth_rate * (categories.NET_TAXABLE-fourth_margin)))
else:
 tax = 0
result = round_up(tax)

</field>
	</record>
<!-- Net Taxable rule -->
	<record id="ke_rule17" model="hr.salary.rule">
	   <field name="name">Net Taxable Pay</field>
	   <field name="category_id" ref="hr_ke.category13"/>
	   <field name="code">NET_TAXABLE</field>
	   <field name="sequence">50</field>
	   <field name="active">True</field>
	   <field name="appears_on_payslip">True</field>
	   <field name="condition_select">none</field>
	   <field name="amount_select">code</field>
	   <field name="amount_python_compute">result = categories.GROSS_TAXABLE - categories.PRE_TAX_DED</field>
	</record>
<!-- Gross Taxable rule -->
	<record id="ke_rule18" model="hr.salary.rule">
	   <field name="name">Gross Taxable Pay</field>
	   <field name="category_id" ref="hr_ke.category14"/>
	   <field name="code">GROSS_TAXABLE</field>
	   <field name="sequence">30</field>
	   <field name="active">True</field>
	   <field name="appears_on_payslip">True</field>
	   <field name="condition_select">none</field>
	   <field name="amount_select">code</field>
	   <field name="amount_python_compute">result = categories.GROSS_PAY + categories.BENEFITS</field>
	</record>
<!-- Personal Tax Relief Rule -->
	<record id="ke_rule19" model="hr.salary.rule">
	   <field name="name">Personal Tax Relief</field>
	   <field name="category_id" ref="hr_ke.category9"/>
	   <field name="code">PER_RELIEF</field>
	   <field name="sequence">65</field>
	   <field name="active">True</field>
	   <field name="appears_on_payslip">True</field>
	   <field name="condition_select">none</field>
	   <field name="amount_select">code</field>
	   <field name="amount_python_compute">result = 1162</field>
	</record>
<!-- NSSF Deductions rule-->
	<record id="ke_rule20" model="hr.salary.rule">
	   <field name="name">National Social Security Fund</field>
	   <field name="category_id" ref="hr_ke.category10"/>
	   <field name="code">NSSF</field>
	   <field name="sequence">40</field>
	   <field name="active">True</field>
	   <field name="appears_on_payslip">True</field>
	   <field name="condition_select">none</field>
	   <field name="amount_select">code</field>
	   <field name="amount_python_compute">TIER1_RATE = 0.06; TIER2_RATE = 0.06; LEL = 6000; UEL = 18000; PAY = categories.GROSS_PAY

### Calculation of NSSF Contribution based on Gross Pay###
if  PAY &lt;= LEL: nssf = round((TIER1_RATE * PAY))
elif PAY > LEL and PAY &lt;= UEL: nssf = round((TIER1_RATE * LEL) + (TIER2_RATE* (PAY - LEL)))
elif PAY > UEL: nssf = round((TIER1_RATE * LEL) + (TIER2_RATE* (UEL - LEL)))
else: nssf = 0
result = nssf</field>
	</record>
<!-- NHIF Deductions rule-->
	<record id="ke_rule21" model="hr.salary.rule">
	   <field name="name">National Hospital Insurance Fund</field>
	   <field name="category_id" ref="hr_ke.category11"/>
	   <field name="code">NHIF</field>
	   <field name="sequence">80</field>
	   <field name="active">True</field>
	   <field name="appears_on_payslip">True</field>
	   <field name="condition_select">none</field>
	   <field name="amount_select">code</field>
	   <field name="amount_python_compute">#NHIF Upper limits and Contributions
MARGIN1 = 5999; 	        CONTRIB1 = 150
MARGIN2 = 7999; 	        CONTRIB2 = 300
MARGIN3 = 11999; 	CONTRIB3 = 400
MARGIN4 = 14999; 	CONTRIB4 = 500
MARGIN5 = 19999;	        CONTRIB5 = 600
MARGIN6 = 24999; 	CONTRIB6 = 750
MARGIN7 = 29999; 	CONTRIB7 = 850
MARGIN8 = 34999; 	CONTRIB8 = 900
MARGIN9 = 39999; 	CONTRIB9 = 950
MARGIN10 = 44999; 	CONTRIB10 = 1000
MARGIN11 = 49999; 	CONTRIB11 = 1100
MARGIN12 = 59999; 	CONTRIB12 = 1200
MARGIN13 = 69999; 	CONTRIB13 = 1300
MARGIN14 = 79999; 	CONTRIB14 = 1400
MARGIN15 = 89999; 	CONTRIB15 = 1500
MARGIN16 = 99999; 	CONTRIB16 = 1600;
PAY = categories.GROSS_PAY; CONTRIB17 = 1700

###### Calculation of NHIF contribution based on the maximum pay###
if PAY &lt;= MARGIN1: nhif = CONTRIB1
elif PAY &lt;= MARGIN2 and PAY > MARGIN1: nhif = CONTRIB2
elif PAY &lt;= MARGIN3 and PAY > MARGIN2: nhif = CONTRIB3
elif PAY &lt;= MARGIN4 and PAY > MARGIN3: nhif = CONTRIB4
elif PAY &lt;= MARGIN5 and PAY > MARGIN4: nhif = CONTRIB5
elif PAY &lt;= MARGIN6 and PAY > MARGIN5: nhif = CONTRIB6
elif PAY &lt;= MARGIN7 and PAY > MARGIN6: nhif = CONTRIB7
elif PAY &lt;= MARGIN8 and PAY > MARGIN7: nhif = CONTRIB8
elif PAY &lt;= MARGIN9 and PAY > MARGIN8: nhif = CONTRIB9
elif PAY &lt;= MARGIN10 and PAY > MARGIN9: nhif = CONTRIB10
elif PAY &lt;= MARGIN11 and PAY > MARGIN10: nhif = CONTRIB11
elif PAY &lt;= MARGIN12 and PAY > MARGIN11: nhif = CONTRIB12
elif PAY &lt;= MARGIN13 and PAY > MARGIN12: nhif = CONTRIB13
elif PAY &lt;= MARGIN14 and PAY > MARGIN13: nhif = CONTRIB14
elif PAY &lt;= MARGIN15 and PAY > MARGIN14: nhif = CONTRIB15
elif PAY &lt;= MARGIN16 and PAY > MARGIN15: nhif = CONTRIB16
elif PAY > MARGIN16: nhif = CONTRIB17
else: nhif = 0
result = nhif</field>
	</record>
<!-- Net Tax Rule-->
	<record id="ke_rule22" model="hr.salary.rule">
	   <field name="name">Net Tax</field>
	   <field name="category_id" ref="hr_ke.category15"/>
	   <field name="code">NET_TAX</field>
	   <field name="sequence">70</field>
	   <field name="active">True</field>
	   <field name="appears_on_payslip">True</field>
	   <field name="condition_select">none</field>
	   <field name="amount_select">code</field>
	   <field name="amount_python_compute">result = categories.TAX - categories.TAX_RELIEF</field>
	</record>
<!-- Witholding Tax Rule -->
	<record id="ke_rule23" model="hr.salary.rule">
	   <field name="name">Withholding Tax</field>
	   <field name="category_id" ref="hr_ke.category12"/>
	   <field name="code">WHT</field>
	   <field name="sequence">60</field>
	   <field name="active">True</field>
	   <field name="appears_on_payslip">True</field>
	   <field name="condition_select">none</field>
	   <field name="amount_select">code</field>
	   <field name="amount_python_compute">
WHT_RATE = 0.05
MIN_LIMIT = 24000
round_up = lambda x: int(x + 1) if int(x) != x else int(x)
if  categories.NET_TAXABLE > MIN_LIMIT:
    result = round_up(WHT_RATE * categories.NET_TAXABLE)
else:
    result = 0
</field>
	</record>

<!--  Casuals PH Basic Salary  Rule -->
	<record id="ke_rule24" model="hr.salary.rule">
	   <field name="name">Basic Wage - PH</field>
	   <field name="category_id" ref="hr_ke.category1"/>
	   <field name="code">CS_PH</field>
	   <field name="sequence">1</field>
	   <field name="active">True</field>
	   <field name="appears_on_payslip">True</field>
	   <field name="condition_select">none</field>
	   <field name="amount_select">code</field>
	   <field name="amount_python_compute">
PH_RATE = contract.wage
result = worked_days.PH.number_of_hours * PH_RATE
</field>
	</record>
<!--  Casuals PD Basic Salary  Rule -->
	<record id="ke_rule25" model="hr.salary.rule">
	   <field name="name">Basic Wage - PD</field>
	   <field name="category_id" ref="hr_ke.category1"/>
	   <field name="code">CS_PD</field>
	   <field name="sequence">1</field>
	   <field name="active">True</field>
	   <field name="appears_on_payslip">True</field>
	   <field name="condition_select">none</field>
	   <field name="amount_select">code</field>
	   <field name="amount_python_compute">
PD_RATE = contract.wage
result = worked_days.PD.number_of_days * PD_RATE
</field>
	</record>

<!--Benefits -->
	<record id="benefit1" model="ke.benefit.type">
	   <field name="name">Housing</field>
	   <field name="code">HOUSE</field>
	   <field name="taxable">True</field>
	   <field name="frequency">month</field>
	   <field name="formula">
#Available variables:
#----------------------
# contract: hr.contract object
# benefit: this benefit(housing)
# Note: returned value have to be set in the variable 'result'
#[BASIC PAY + TOTAL BENEFITS+ TOTAL EARNINGS] * 0.15

### INITIALIZE VARAIBLES###
BASIC_SALARY = contract.wage
PERCENTAGE = 0.15
ACTUAL_RENT = benefit.actual_cost
TOTAL_BENEFITS = 0
TOTAL_EARNINGS = 0

###Compute total benefits (non-cash) for employee ###
for other_benefit in contract.benefits:
     if benefit.id != other_benefit.id:
         TOTAL_BENEFITS += other_benefit.amount

### Compute total earnings for employee ###
for other_earning in contract.earnings:
     TOTAL_EARNINGS += other_earning.amount

### Compute Taxable Value for Housing ###
COMPUTED_TAXABLE_VALUE = (BASIC_SALARY + TOTAL_BENEFITS + TOTAL_EARNINGS) * PERCENTAGE

### Whichever is higher between Actual Rent and computed taxable value shall become taxable value of Housing###
result = max(ACTUAL_RENT, COMPUTED_TAXABLE_VALUE)
	   </field>
	</record>

	<record id="benefit2" model="ke.benefit.type">
	   <field name="name">Electricity </field>
	   <field name="code">ELECTR</field>
	   <field name="taxable">True</field>
	   <field name="frequency">month</field>
	   <field name="formula">
#Available variables:
#----------------------
# contract: hr.contract object
# benefit: this benefit(Electricity)
# Note: returned value have to be set in the variable 'result'
PRESCRIBED_RATE = 1500
result = max(benefit.actual_cost, PRESCRIBED_RATE)
	   </field>
	</record>

	<record id="benefit3" model="ke.benefit.type">
	   <field name="name">Water</field>
	   <field name="code">WATER</field>
	   <field name="taxable">True</field>
	   <field name="frequency">month</field>
	   <field name="formula">
#Available variables:
#----------------------
# contract: hr.contract object
# benefit: this benefit(Water)
# Note: returned value have to be set in the variable 'result'
PRESCRIBED_RATE = 500
result = max(benefit.actual_cost, PRESCRIBED_RATE)

	   </field>
	</record>

	<record id="benefit4" model="ke.benefit.type">
	   <field name="name">Furniture</field>
	   <field name="code">FURNT</field>
	   <field name="taxable">True</field>
	   <field name="frequency">month</field>
	   <field name="formula">
#Available variables:
#----------------------
# contract: hr.contract object
# benefit: this benefit(Furnitire)
# Note: returned value have to be set in the variable 'result'
result = 0.01 * benefit.actual_cost
	   </field>
	</record>

	<record id="benefit5" model="ke.benefit.type">
	   <field name="name">Telephone</field>
	   <field name="code">TELEPHONE</field>
	   <field name="taxable">True</field>
	   <field name="frequency">month</field>
	   <field name="formula">
#Available variables:
#----------------------
# contract: hr.contract object
# benefit: this benefit(Telephone)
# Note: returned value have to be set in the variable 'result'
result = 0.3 * benefit.actual_cost
	   </field>
	</record>

	<record id="benefit6" model="ke.benefit.type">
	   <field name="name">Company Vehicle</field>
	   <field name="code">VEHICLE</field>
	   <field name="taxable">True</field>
	   <field name="frequency">month</field>
	   <field name="formula">
#Available variables:
#----------------------
# contract: hr.contract object
# benefit: this benefit(company Vehicle)
# Note: returned value have to be set in the variable 'result'
result = 0.02 * benefit.actual_cost
	   </field>
	</record>

	<record id="benefit7" model="ke.benefit.type">
	   <field name="name">Servant</field>
	   <field name="code">SERVANT</field>
	   <field name="taxable">True</field>
	   <field name="frequency">month</field>
	   <field name="formula">
#Available variables:
#----------------------
# contract: hr.contract object
# benefit: this benefit(Servant)
# Note: returned value have to be set in the variable 'result'
result =  benefit.actual_cost
	   </field>
	</record>

<!--Other Earnings - bonus-->
	<record id="earn1" model="ke.earnings.type">
	   <field name="name">Bonus</field>
	   <field name="code">BONUS</field>
	   <field name="taxable">True</field>
	   <field name="frequency">month</field>
	   <field name="formula">
#Available variables:
#----------------------
# contract: hr.contract object
# earning: this earning(Bonus)
# Note: returned value have to be set in the variable 'result'
result = 0
	   </field>
	</record>

<!--Other Earnings Comission-->
	<record id="earn2" model="ke.earnings.type">
	   <field name="name">Commision</field>
	   <field name="code">COMM</field>
	   <field name="taxable">True</field>
	   <field name="frequency">month</field>
	   <field name="formula">
#Available variables:
#----------------------
# contract: hr.contract object
# earning: this earning(Bonus)
# Note: returned value have to be set in the variable 'result'
result = 0
	   </field>
	</record>
<!--Other Earnings -Overtime-->
	<record id="earn3" model="ke.earnings.type">
	   <field name="name">Overtime</field>
	   <field name="code">OVERTIME</field>
	   <field name="taxable">True</field>
	   <field name="frequency">month</field>
	   <field name="formula">
#Available variables:
#----------------------
# contract: hr.contract object
# earning: this earning(Bonus)
# Note: returned value have to be set in the variable 'result'
result = 0
	   </field>
	</record>

<!--Deductions -->

	<record id="deduct1" model="ke.deductions.type">
	   <field name="name">Pension/Provident Fund Scheme</field>
	   <field name="code">PENSION</field>
	   <field name="pre_tax">True</field>
	   <field name="sequence">40</field>
	   <field name="net_pay"></field>
	   <field name="frequency">month</field>
	   <field name="formula">
#Available variables:
#----------------------
# contract: hr.contract object
# deduction: this deduction(Pension/Provident Fund)
# Note: returned value have to be set in the variable 'result'
PRESCRIBED_LIMIT = 17500
PERCENTAGE = 0.3
PENSIONABLE_PAY = contract.wage
ACTUAL_CONTRIB = deduction.base
PERCENT_PAY = PERCENTAGE * PENSIONABLE_PAY

###For Pension/Provident Fund; the lesser of: prescribed limit, 30% of pensionable pay or the actual contribution per month is the allowed deduction ####
result = min(PRESCRIBED_LIMIT, PERCENT_PAY, ACTUAL_CONTRIB)
	   </field>
	</record>

	<record id="deduct2" model="ke.deductions.type">
	   <field name="name">Home Owner Savings Plan (HOSP)</field>
	   <field name="code">HOSP</field>
	   <field name="pre_tax">True</field>
	   <field name="sequence">40</field>
	   <field name="net_pay">1</field>
	   <field name="frequency">month</field>
	   <field name="formula">
#Available variables:
#----------------------
# contract: hr.contract object
# deduction: this deduction(HOSP)
# Note: returned value have to be set in the variable 'result'
PRESCRIBED_LIMIT = 4000

###For HOSP, the lesser of the prescribed limit or the actual contribution to HOSP is taken as the allowed deduction####
result = min(PRESCRIBED_LIMIT, deduction.base)
	   </field>
	</record>

	<record id="deduct3" model="ke.deductions.type">
	   <field name="name">Owner Occupied Interest</field>
	   <field name="code">OCI</field>
	   <field name="pre_tax">True</field>
	   <field name="sequence">40</field>
	   <field name="net_pay"></field>
	   <field name="frequency">month</field>
	   <field name="formula">
#Available variables:
#----------------------
# contract: hr.contract object
# deduction: this deduction(OCI)
# Note: returned value have to be set in the variable 'result'
PRESCRIBED_LIMIT = 8333

###For OCI , the lesser of the actual interest paid or the prescribed limit is taken as the allowed deduction####
result = min(PRESCRIBED_LIMIT, deduction.base)
	   </field>
	</record>


	<record id="deduct4" model="ke.deductions.type">
	   <field name="name">Higher Education Loans Board (HELB)</field>
	   <field name="code">HELB</field>
	   <field name="pre_tax"></field>
	   <field name="sequence">80</field>
	   <field name="net_pay">1</field>
	   <field name="frequency">month</field>
	   <field name="formula">
#Available variables:
#----------------------
# contract: hr.contract object
# deduction: this deduction(HELB)
# Note: returned value have to be set in the variable 'result'

###Please consult HELB for the formula to use. The default behaviour is to deduct (after Tax) the actual voluntary contribution per employee####
result = deduction.base
	   </field>
	</record>
	<!--Salary Advance-->
	<record id="deduct5" model="ke.deductions.type">
	   <field name="name">Salary Advance</field>
	   <field name="code">SAL_ADV</field>
	   <field name="pre_tax"></field>
	   <field name="sequence">80</field>
	   <field name="net_pay">1</field>
	   <field name="frequency">month</field>
	   <field name="formula">
#Available variables:
#----------------------
# contract: hr.contract object
# deduction: this deduction(Salary Advanced)
# Note: returned value have to be set in the variable 'result'

result = deduction.base
	   </field>
	</record>

<!--Tax Reliefs -->
	<record id="relief1" model="ke.relief.type">
	   <field name="name">Insurance Relief</field>
	   <field name="code">INS_RLF</field>
	   <field name="frequency">month</field>
	   <field name="formula">
#Available variables:
#----------------------
# contract: hr.contract object
# relief: this relief(Insurance Relief)
# Note: returned value have to be set in the variable 'result'

PERCENTAGE = 0.15
PRESCRIBED_LIMIT = 3000
COMPUTED_RELIEF = PERCENTAGE * relief.base

###For Insurance relief, the lesser of the 15% of the (actual Insurance premium) and (the prescribed limit of 3000)  shall be deducted from PAYE####
result = min(PRESCRIBED_LIMIT, COMPUTED_RELIEF)
	   </field>
	</record>

        <!-- Default Salary Structure for normal Employee -->
         <record id="structure_standard" model="hr.payroll.structure">
            <field name="code">NORMAL_EMPLOYEE</field>
            <field name="rem_type">monthly</field>
            <field name="name">Standard Salary Structure</field>
            <field eval="[(6, 0, [ref('ke_rule1'), ref('ke_rule2'),ref('ke_rule3'),ref('ke_rule16'), ref('ke_rule17'), ref('ke_rule18'),ref('ke_rule19'), 
		ref('ke_rule20'), ref('ke_rule21'),ref('ke_rule22'),])]" name="rule_ids"/>
            <field name="company_id" ref="base.main_company"/>
	    <field name="parent_id"></field>
        </record>

        <!-- Salary Structure for consultants -->
         <record id="structure_consultants" model="hr.payroll.structure">
            <field name="code">CONSULTANT</field>
            <field name="rem_type">monthly</field>
            <field name="name">Monthly wage - Consultants Salary Structure</field>
            <field eval="[(6, 0, [ref('ke_rule1'), ref('ke_rule2'),ref('ke_rule3'), ref('ke_rule17'), ref('ke_rule18'),ref('ke_rule19'), 
		ref('ke_rule20'), ref('ke_rule21'),ref('ke_rule22'),ref('ke_rule23'),])]" name="rule_ids"/>
            <field name="company_id" ref="base.main_company"/>
	    <field name="parent_id"></field>
        </record>

        <!-- Salary Structure for PH casuals/Freelancers -->
         <record id="structure_ph_casuals" model="hr.payroll.structure">
            <field name="code">PH_CASUAL</field>
            <field name="rem_type">hourly</field>
            <field name="name">Per Hour - Salary Structure</field>
            <field eval="[(6, 0, [ref('ke_rule2'), ref('ke_rule3'), ref('ke_rule17'), ref('ke_rule18'), ref('ke_rule22'),
		ref('ke_rule23'), ref('ke_rule24'),])]" name="rule_ids"/>
            <field name="company_id" ref="base.main_company"/>
	    <field name="parent_id"></field>
        </record>
        <!-- Salary Structure for PD casuals/Freelancers -->
         <record id="structure_pd_casuals" model="hr.payroll.structure">
            <field name="code">PD_CASUAL</field>
            <field name="rem_type">daily</field>
            <field name="name">Per Day - Salary Structure</field>
            <field eval="[(6, 0, [ref('ke_rule2'), ref('ke_rule3'), ref('ke_rule17'), ref('ke_rule18'), ref('ke_rule22'),
		ref('ke_rule23'), ref('ke_rule25'),])]" name="rule_ids"/>
            <field name="company_id" ref="base.main_company"/>
	    <field name="parent_id"></field>
        </record>
    </data>
</openerp>
